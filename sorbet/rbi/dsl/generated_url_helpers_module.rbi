# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GeneratedUrlHelpersModule`.
# Please instead update this file by running `bin/tapioca dsl GeneratedUrlHelpersModule`.


module GeneratedUrlHelpersModule
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes

  sig { params(args: T.untyped).returns(String) }
  def api_security_events_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def api_service_providers_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def auth_logindotgov_callback_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def banner_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def banners_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def destroy_user_session_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_banner_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_service_provider_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_team_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_team_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def env_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_banner_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_service_config_wizard_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_service_provider_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_team_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_team_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_blob_representation_proxy_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_blob_representation_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_blob_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_direct_uploads_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_disk_service_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_info_properties_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_info_routes_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_info_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_mailers_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_representation_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_service_blob_proxy_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_service_blob_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_storage_proxy_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_storage_redirect_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def remove_unconfirmed_users_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def root_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def security_event_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def security_events_all_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def security_events_search_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def security_events_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_config_wizard_index_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_config_wizard_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_provider_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_providers_all_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_providers_deleted_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_providers_publish_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def service_providers_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def team_remove_confirm_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def team_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def team_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def team_users_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def teams_all_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def teams_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def tools_saml_request_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def update_rails_disk_service_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def users_none_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def users_url(*args); end
end
