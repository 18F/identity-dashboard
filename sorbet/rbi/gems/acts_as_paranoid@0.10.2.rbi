# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `acts_as_paranoid` gem.
# Please instead update this file by running `bin/tapioca gem acts_as_paranoid`.


class ActiveRecord::Base
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  include ::ActsAsParanoid::Associations
  extend ::ActsAsParanoid
  extend ::ActsAsParanoid::Associations::ClassMethods
end

class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  include ::ActsAsParanoid::AssociationReflection
end

class ActiveRecord::Relation
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActsAsParanoid::Relation
end

# source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#3
module ActsAsParanoid
  # source://acts_as_paranoid//lib/acts_as_paranoid.rb#19
  def acts_as_paranoid(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid.rb#11
  def paranoid?; end

  # source://acts_as_paranoid//lib/acts_as_paranoid.rb#15
  def validates_as_paranoid; end
end

# Override for ActiveRecord::Reflection::AssociationReflection
#
# This makes automatic finding of inverse associations work where the
# inverse is a belongs_to association with the :with_deleted option set.
#
# Specifying :with_deleted for the belongs_to association would stop the
# inverse from being calculated because it sets scope where there was none,
# and normally an association having a scope means ActiveRecord will not
# automatically find the inverse association.
#
# This override adds an exception to that rule only for the case where the
# scope was added just to support the :with_deleted option.
#
# source://acts_as_paranoid//lib/acts_as_paranoid/association_reflection.rb#16
module ActsAsParanoid::AssociationReflection
  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/association_reflection.rb#31
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end
end

# This module is included in ActiveRecord::Base to provide paranoid associations.
#
# source://acts_as_paranoid//lib/acts_as_paranoid/associations.rb#5
module ActsAsParanoid::Associations
  class << self
    # @private
    #
    # source://acts_as_paranoid//lib/acts_as_paranoid/associations.rb#6
    def included(base); end
  end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/associations.rb#14
module ActsAsParanoid::Associations::ClassMethods
  # source://acts_as_paranoid//lib/acts_as_paranoid/associations.rb#15
  def belongs_to_with_deleted(target, scope = T.unsafe(nil), options = T.unsafe(nil)); end

  private

  # source://acts_as_paranoid//lib/acts_as_paranoid/associations.rb#40
  def make_scope_with_deleted(scope); end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#4
module ActsAsParanoid::Core
  mixes_in_class_methods ::ActsAsParanoid::Core::ClassMethods

  # Straight from ActiveRecord 5.1!
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#139
  def delete; end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#224
  def deleted?; end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#238
  def deleted_fully?; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#170
  def destroy; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#164
  def destroy!; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#145
  def destroy_fully!; end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#224
  def destroyed?; end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#238
  def destroyed_fully?; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#134
  def paranoid_value; end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#130
  def persisted?; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#193
  def recover(options = T.unsafe(nil)); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#218
  def recover!(options = T.unsafe(nil)); end

  private

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#321
  def decrement_counters_on_associations; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#252
  def destroy_dependent_associations!; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#311
  def each_counter_cached_association_reflection; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#288
  def get_association_scope(dependent_association); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#317
  def increment_counters_on_associations; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#292
  def paranoid_value=(value); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#263
  def recover_dependent_association(reflection, deleted_value, options); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#246
  def recover_dependent_associations(deleted_value, options); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#325
  def stale_paranoid_value; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#296
  def update_counters_on_associations(method_sym); end

  class << self
    # @private
    #
    # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#5
    def included(base); end
  end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#9
module ActsAsParanoid::Core::ClassMethods
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#18
  def after_recover(method); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#14
  def before_recover(method); end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#61
  def boolean_type_not_nullable?; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#41
  def delete_all(conditions = T.unsafe(nil)); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#37
  def delete_all!(conditions = T.unsafe(nil)); end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#85
  def delete_now_value; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#79
  def dependent_associations; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#26
  def only_deleted; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#65
  def paranoid_column; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#73
  def paranoid_column_reference; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#69
  def paranoid_column_type; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#46
  def paranoid_default_scope; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#93
  def recovery_value; end

  # @return [Boolean]
  #
  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#57
  def string_type_with_deleted_value?; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#22
  def with_deleted; end

  protected

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#103
  def define_deleted_time_scopes; end

  # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#118
  def without_paranoid_default_scope; end

  class << self
    # @private
    #
    # source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#10
    def extended(base); end
  end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/core.rb#77
ActsAsParanoid::Core::ClassMethods::DESTROYING_ASSOCIATION_DEPENDENCY_TYPES = T.let(T.unsafe(nil), Array)

# source://acts_as_paranoid//lib/acts_as_paranoid/relation.rb#4
module ActsAsParanoid::Relation
  class << self
    # @private
    #
    # source://acts_as_paranoid//lib/acts_as_paranoid/relation.rb#5
    def included(base); end
  end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/validations.rb#6
module ActsAsParanoid::Validations
  mixes_in_class_methods ::ActsAsParanoid::Validations::ClassMethods

  class << self
    # @private
    #
    # source://acts_as_paranoid//lib/acts_as_paranoid/validations.rb#7
    def included(base); end
  end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/validations.rb#19
module ActsAsParanoid::Validations::ClassMethods
  # source://acts_as_paranoid//lib/acts_as_paranoid/validations.rb#20
  def validates_uniqueness_of_without_deleted(*attr_names); end
end

# source://acts_as_paranoid//lib/acts_as_paranoid/validations.rb#11
class ActsAsParanoid::Validations::UniquenessWithoutDeletedValidator < ::ActiveRecord::Validations::UniquenessValidator
  private

  # source://acts_as_paranoid//lib/acts_as_paranoid/validations.rb#14
  def build_relation(klass, attribute, value); end
end
