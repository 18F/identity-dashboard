# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `json-jwt` gem.
# Please instead update this file by running `bin/tapioca gem json-jwt`.


# source://json-jwt//lib/json/jose.rb#4
module JSON::JOSE
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::JSON::JOSE::ClassMethods

  # source://json-jwt//lib/json/jose.rb#35
  def secure_compare(a, b); end

  # source://json-jwt//lib/json/jose.rb#24
  def with_jwk_support(key); end
end

# source://json-jwt//lib/json/jose.rb#47
module JSON::JOSE::ClassMethods
  # source://json-jwt//lib/json/jose.rb#59
  def decode(input, key_or_secret = T.unsafe(nil), algorithms = T.unsafe(nil), encryption_methods = T.unsafe(nil), allow_blank_payload = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jose.rb#48
  def register_header_keys(*keys); end
end

# source://json-jwt//lib/json/jwe.rb#6
class JSON::JWE
  include ::JSON::JOSE
  extend ::JSON::JOSE::ClassMethods

  # @return [JWE] a new instance of JWE
  #
  # source://json-jwt//lib/json/jwe.rb#25
  def initialize(input = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jose.rb#50
  def alg; end

  # source://json-jwt//lib/json/jose.rb#53
  def alg=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def algorithm; end

  # source://json-jwt//lib/json/jose.rb#50
  def apu; end

  # source://json-jwt//lib/json/jose.rb#53
  def apu=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def apv; end

  # source://json-jwt//lib/json/jose.rb#53
  def apv=(value); end

  # source://json-jwt//lib/json/jwe.rb#84
  def as_json(options = T.unsafe(nil)); end

  # Returns the value of attribute auth_data.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def auth_data; end

  # Sets the attribute auth_data
  #
  # @param value the value to set the attribute auth_data to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def auth_data=(_arg0); end

  # Sets the attribute authentication_tag
  #
  # @param value the value to set the attribute authentication_tag to.
  #
  # source://json-jwt//lib/json/jwe.rb#20
  def authentication_tag=(_arg0); end

  # Returns the value of attribute cipher_text.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def cipher_text; end

  # Sets the attribute cipher_text
  #
  # @param value the value to set the attribute cipher_text to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def cipher_text=(_arg0); end

  # Returns the value of attribute content_encryption_key.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def content_encryption_key; end

  # Sets the attribute content_encryption_key
  #
  # @param value the value to set the attribute content_encryption_key to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def content_encryption_key=(_arg0); end

  # source://json-jwt//lib/json/jose.rb#19
  def content_type; end

  # source://json-jwt//lib/json/jose.rb#50
  def crit; end

  # source://json-jwt//lib/json/jose.rb#53
  def crit=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def cty; end

  # source://json-jwt//lib/json/jose.rb#53
  def cty=(value); end

  # @raise [UnexpectedAlgorithm]
  #
  # source://json-jwt//lib/json/jwe.rb#42
  def decrypt!(private_key_or_secret, algorithms = T.unsafe(nil), encryption_methods = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jose.rb#50
  def enc; end

  # source://json-jwt//lib/json/jose.rb#53
  def enc=(value); end

  # source://json-jwt//lib/json/jwe.rb#29
  def encrypt!(public_key_or_secret); end

  # Returns the value of attribute encryption_key.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def encryption_key; end

  # Sets the attribute encryption_key
  #
  # @param value the value to set the attribute encryption_key to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def encryption_key=(_arg0); end

  # source://json-jwt//lib/json/jose.rb#50
  def encryption_method; end

  # source://json-jwt//lib/json/jose.rb#50
  def epk; end

  # source://json-jwt//lib/json/jose.rb#53
  def epk=(value); end

  # source://json-jwt//lib/json/jose.rb#15
  def header; end

  # source://json-jwt//lib/json/jose.rb#14
  def header=(_arg0); end

  # Returns the value of attribute iv.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def iv; end

  # Sets the attribute iv
  #
  # @param value the value to set the attribute iv to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def iv=(_arg0); end

  # source://json-jwt//lib/json/jose.rb#50
  def jku; end

  # source://json-jwt//lib/json/jose.rb#53
  def jku=(value); end

  # Sets the attribute jwe_encrypted_key
  #
  # @param value the value to set the attribute jwe_encrypted_key to.
  #
  # source://json-jwt//lib/json/jwe.rb#20
  def jwe_encrypted_key=(_arg0); end

  # source://json-jwt//lib/json/jose.rb#50
  def jwk; end

  # source://json-jwt//lib/json/jose.rb#53
  def jwk=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def kid; end

  # source://json-jwt//lib/json/jose.rb#53
  def kid=(value); end

  # Returns the value of attribute mac_key.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def mac_key; end

  # Sets the attribute mac_key
  #
  # @param value the value to set the attribute mac_key to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def mac_key=(_arg0); end

  # Returns the value of attribute plain_text.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def plain_text; end

  # Sets the attribute plain_text
  #
  # @param value the value to set the attribute plain_text to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def plain_text=(_arg0); end

  # Returns the value of attribute private_key_or_secret.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def private_key_or_secret; end

  # Sets the attribute private_key_or_secret
  #
  # @param value the value to set the attribute private_key_or_secret to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def private_key_or_secret=(_arg0); end

  # Returns the value of attribute public_key_or_secret.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def public_key_or_secret; end

  # Sets the attribute public_key_or_secret
  #
  # @param value the value to set the attribute public_key_or_secret to.
  #
  # source://json-jwt//lib/json/jwe.rb#15
  def public_key_or_secret=(_arg0); end

  # source://json-jwt//lib/json/jwe.rb#72
  def to_s; end

  # source://json-jwt//lib/json/jose.rb#50
  def typ; end

  # source://json-jwt//lib/json/jose.rb#53
  def typ=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def x5c; end

  # source://json-jwt//lib/json/jose.rb#53
  def x5c=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def x5t; end

  # source://json-jwt//lib/json/jose.rb#53
  def x5t=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def x5u; end

  # source://json-jwt//lib/json/jose.rb#53
  def x5u=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def zip; end

  # source://json-jwt//lib/json/jose.rb#53
  def zip=(value); end

  private

  # source://json-jwt//lib/json/jwe.rb#203
  def authentication_tag; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jwe.rb#115
  def cbc?; end

  # source://json-jwt//lib/json/jwe.rb#123
  def cipher; end

  # source://json-jwt//lib/json/jwe.rb#128
  def cipher_name; end

  # decryption
  #
  # source://json-jwt//lib/json/jwe.rb#222
  def decrypt_content_encryption_key; end

  # source://json-jwt//lib/json/jwe.rb#158
  def derive_encryption_and_mac_keys; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jwe.rb#119
  def dir?; end

  # common
  #
  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jwe.rb#111
  def gcm?; end

  # source://json-jwt//lib/json/jwe.rb#192
  def generate_content_encryption_key; end

  # encryption
  #
  # source://json-jwt//lib/json/jwe.rb#171
  def jwe_encrypted_key; end

  # source://json-jwt//lib/json/jwe.rb#154
  def sha_digest; end

  # source://json-jwt//lib/json/jwe.rb#143
  def sha_size; end

  # source://json-jwt//lib/json/jwe.rb#246
  def verify_cbc_authentication_tag!; end

  class << self
    # source://json-jwt//lib/json/jwe.rb#262
    def decode_compact_serialized(input, private_key_or_secret, algorithms = T.unsafe(nil), encryption_methods = T.unsafe(nil), _allow_blank_payload = T.unsafe(nil)); end

    # source://json-jwt//lib/json/jwe.rb#282
    def decode_json_serialized(input, private_key_or_secret, algorithms = T.unsafe(nil), encryption_methods = T.unsafe(nil), _allow_blank_payload = T.unsafe(nil)); end
  end
end

# source://json-jwt//lib/json/jwe.rb#8
class JSON::JWE::DecryptionFailed < ::JSON::JWT::VerificationFailed; end

# source://json-jwt//lib/json/jwe.rb#7
class JSON::JWE::InvalidFormat < ::JSON::JWT::InvalidFormat; end

# source://json-jwt//lib/json/jwe.rb#11
JSON::JWE::NUM_OF_SEGMENTS = T.let(T.unsafe(nil), Integer)

# source://json-jwt//lib/json/jwe.rb#9
class JSON::JWE::UnexpectedAlgorithm < ::JSON::JWT::UnexpectedAlgorithm; end

# source://json-jwt//lib/json/jwk.rb#2
class JSON::JWK < ::ActiveSupport::HashWithIndifferentAccess
  # @return [JWK] a new instance of JWK
  #
  # source://json-jwt//lib/json/jwk.rb#5
  def initialize(params = T.unsafe(nil), ex_params = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jwk.rb#24
  def content_type; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jwk.rb#57
  def ec?; end

  # source://json-jwt//lib/json/jwk.rb#65
  def normalize; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jwk.rb#61
  def oct?; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jwk.rb#53
  def rsa?; end

  # source://json-jwt//lib/json/jwk.rb#28
  def thumbprint(digest = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jwk.rb#40
  def to_key; end

  private

  # source://json-jwt//lib/json/jwk.rb#92
  def calculate_default_kid; end

  # source://json-jwt//lib/json/jwk.rb#129
  def to_ec_key; end

  # source://json-jwt//lib/json/jwk.rb#98
  def to_rsa_key; end
end

# source://json-jwt//lib/json/jwk/jwkizable.rb#3
module JSON::JWK::JWKizable; end

# source://json-jwt//lib/json/jwk/jwkizable.rb#25
module JSON::JWK::JWKizable::EC
  # source://json-jwt//lib/json/jwk/jwkizable.rb#26
  def to_jwk(ex_params = T.unsafe(nil)); end

  private

  # source://json-jwt//lib/json/jwk/jwkizable.rb#54
  def coordinates; end

  # source://json-jwt//lib/json/jwk/jwkizable.rb#39
  def curve_name; end
end

# source://json-jwt//lib/json/jwk/jwkizable.rb#4
module JSON::JWK::JWKizable::RSA
  # source://json-jwt//lib/json/jwk/jwkizable.rb#5
  def to_jwk(ex_params = T.unsafe(nil)); end
end

# source://json-jwt//lib/json/jwk/set.rb#3
class JSON::JWK::Set < ::Array
  # @return [Set] a new instance of Set
  #
  # source://json-jwt//lib/json/jwk/set.rb#6
  def initialize(*jwks); end

  # source://json-jwt//lib/json/jwk/set.rb#22
  def [](kid); end

  # source://json-jwt//lib/json/jwk/set.rb#28
  def as_json(options = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jwk/set.rb#18
  def content_type; end
end

# source://json-jwt//lib/json/jwk/set/fetcher.rb#4
module JSON::JWK::Set::Fetcher
  class << self
    # source://json-jwt//lib/json/jwk/set/fetcher.rb#56
    def cache; end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#53
    def cache=(cache); end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#31
    def debug(&block); end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#28
    def debug!; end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#25
    def debugging=(boolean); end

    # @return [Boolean]
    #
    # source://json-jwt//lib/json/jwk/set/fetcher.rb#22
    def debugging?; end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#61
    def fetch(jwks_uri, kid:, auto_detect: T.unsafe(nil), **options); end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#40
    def http_client; end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#49
    def http_config(&block); end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#13
    def logger; end

    # source://json-jwt//lib/json/jwk/set/fetcher.rb#16
    def logger=(logger); end
  end
end

# source://json-jwt//lib/json/jwk/set/fetcher.rb#5
class JSON::JWK::Set::Fetcher::Cache
  # source://json-jwt//lib/json/jwk/set/fetcher.rb#10
  def delete(cache_key, options = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jwk/set/fetcher.rb#6
  def fetch(cache_key, options = T.unsafe(nil)); end
end

# source://json-jwt//lib/json/jwk/set.rb#4
class JSON::JWK::Set::KidNotFound < ::JSON::JWT::Exception; end

# source://json-jwt//lib/json/jwk.rb#3
class JSON::JWK::UnknownAlgorithm < ::JSON::JWT::Exception; end

# source://json-jwt//lib/json/jws.rb#2
class JSON::JWS < ::JSON::JWT
  # @return [JWS] a new instance of JWS
  #
  # source://json-jwt//lib/json/jws.rb#11
  def initialize(jwt); end

  # source://json-jwt//lib/json/jws.rb#15
  def sign!(private_key_or_secret); end

  # Sets the attribute signature_base_string
  #
  # @param value the value to set the attribute signature_base_string to.
  #
  # source://json-jwt//lib/json/jws.rb#9
  def signature_base_string=(_arg0); end

  # source://json-jwt//lib/json/jws.rb#33
  def update(hash_or_jwt); end

  # source://json-jwt//lib/json/jws.rb#21
  def verify!(public_key_or_secret, algorithms = T.unsafe(nil)); end

  private

  # source://json-jwt//lib/json/jws.rb#171
  def asn1_to_raw(signature, private_key); end

  # source://json-jwt//lib/json/jws.rb#65
  def autodetected_algorithm_from(private_key_or_secret); end

  # source://json-jwt//lib/json/jws.rb#45
  def digest; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jws.rb#61
  def ecdsa?; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jws.rb#49
  def hmac?; end

  # source://json-jwt//lib/json/jws.rb#164
  def raw_to_asn1(signature, public_key); end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jws.rb#53
  def rsa?; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jws.rb#57
  def rsa_pss?; end

  # source://json-jwt//lib/json/jws.rb#99
  def sign(signature_base_string, private_key_or_secret); end

  # source://json-jwt//lib/json/jws.rb#90
  def signature_base_string; end

  # @return [Boolean]
  #
  # source://json-jwt//lib/json/jws.rb#123
  def valid?(public_key_or_secret); end

  # source://json-jwt//lib/json/jws.rb#146
  def verify_ecdsa_group!(key); end

  class << self
    # source://json-jwt//lib/json/jws.rb#177
    def decode_compact_serialized(input, public_key_or_secret, algorithms = T.unsafe(nil), allow_blank_payload = T.unsafe(nil)); end

    # source://json-jwt//lib/json/jws.rb#198
    def decode_json_serialized(input, public_key_or_secret, algorithms = T.unsafe(nil), allow_blank_payload = T.unsafe(nil)); end
  end
end

# source://json-jwt//lib/json/jws.rb#3
class JSON::JWS::InvalidFormat < ::JSON::JWT::InvalidFormat; end

# source://json-jwt//lib/json/jws.rb#7
JSON::JWS::NUM_OF_SEGMENTS = T.let(T.unsafe(nil), Integer)

# source://json-jwt//lib/json/jws.rb#5
class JSON::JWS::UnexpectedAlgorithm < ::JSON::JWT::UnexpectedAlgorithm; end

# source://json-jwt//lib/json/jws.rb#4
class JSON::JWS::VerificationFailed < ::JSON::JWT::VerificationFailed; end

# source://json-jwt//lib/json/jwt.rb#10
class JSON::JWT < ::ActiveSupport::HashWithIndifferentAccess
  include ::JSON::JOSE
  extend ::JSON::JOSE::ClassMethods

  # @return [JWT] a new instance of JWT
  #
  # source://json-jwt//lib/json/jwt.rb#25
  def initialize(claims = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jose.rb#50
  def alg; end

  # source://json-jwt//lib/json/jose.rb#53
  def alg=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def algorithm; end

  # source://json-jwt//lib/json/jwt.rb#62
  def as_json(options = T.unsafe(nil)); end

  # Returns the value of attribute blank_payload.
  #
  # source://json-jwt//lib/json/jwt.rb#15
  def blank_payload; end

  # Sets the attribute blank_payload
  #
  # @param value the value to set the attribute blank_payload to.
  #
  # source://json-jwt//lib/json/jwt.rb#15
  def blank_payload=(_arg0); end

  # source://json-jwt//lib/json/jose.rb#19
  def content_type; end

  # source://json-jwt//lib/json/jose.rb#50
  def crit; end

  # source://json-jwt//lib/json/jose.rb#53
  def crit=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def cty; end

  # source://json-jwt//lib/json/jose.rb#53
  def cty=(value); end

  # source://json-jwt//lib/json/jwt.rb#44
  def encrypt(public_key_or_secret, algorithm = T.unsafe(nil), encryption_method = T.unsafe(nil)); end

  # source://json-jwt//lib/json/jose.rb#15
  def header; end

  # source://json-jwt//lib/json/jose.rb#14
  def header=(_arg0); end

  # source://json-jwt//lib/json/jose.rb#50
  def jku; end

  # source://json-jwt//lib/json/jose.rb#53
  def jku=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def jwk; end

  # source://json-jwt//lib/json/jose.rb#53
  def jwk=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def kid; end

  # source://json-jwt//lib/json/jose.rb#53
  def kid=(value); end

  # source://json-jwt//lib/json/jwt.rb#99
  def pretty_generate; end

  # source://json-jwt//lib/json/jwt.rb#37
  def sign(private_key_or_secret, algorithm = T.unsafe(nil)); end

  # Returns the value of attribute signature.
  #
  # source://json-jwt//lib/json/jwt.rb#16
  def signature; end

  # Sets the attribute signature
  #
  # @param value the value to set the attribute signature to.
  #
  # source://json-jwt//lib/json/jwt.rb#16
  def signature=(_arg0); end

  # source://json-jwt//lib/json/jwt.rb#83
  def to_json(*args); end

  # source://json-jwt//lib/json/jwt.rb#52
  def to_s; end

  # source://json-jwt//lib/json/jose.rb#50
  def typ; end

  # source://json-jwt//lib/json/jose.rb#53
  def typ=(value); end

  # source://json-jwt//lib/json/jwt.rb#91
  def update(claims); end

  # source://json-jwt//lib/json/jose.rb#50
  def x5c; end

  # source://json-jwt//lib/json/jose.rb#53
  def x5c=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def x5t; end

  # source://json-jwt//lib/json/jose.rb#53
  def x5t=(value); end

  # source://json-jwt//lib/json/jose.rb#50
  def x5u; end

  # source://json-jwt//lib/json/jose.rb#53
  def x5u=(value); end

  class << self
    # source://json-jwt//lib/json/jwt.rb#107
    def decode_compact_serialized(jwt_string, key_or_secret, algorithms = T.unsafe(nil), encryption_methods = T.unsafe(nil), allow_blank_payload = T.unsafe(nil)); end

    # source://json-jwt//lib/json/jwt.rb#122
    def decode_json_serialized(input, key_or_secret, algorithms = T.unsafe(nil), encryption_methods = T.unsafe(nil), allow_blank_payload = T.unsafe(nil)); end

    # source://json-jwt//lib/json/jwt.rb#133
    def pretty_generate(jwt_string); end
  end
end

# source://json-jwt//lib/json/jwt.rb#18
class JSON::JWT::Exception < ::StandardError; end

# source://json-jwt//lib/json/jwt.rb#19
class JSON::JWT::InvalidFormat < ::JSON::JWT::Exception; end

# source://json-jwt//lib/json/jwt.rb#21
class JSON::JWT::UnexpectedAlgorithm < ::JSON::JWT::VerificationFailed; end

# source://json-jwt//lib/json/jwt.rb#11
JSON::JWT::VERSION = T.let(T.unsafe(nil), String)

# source://json-jwt//lib/json/jwt.rb#20
class JSON::JWT::VerificationFailed < ::JSON::JWT::Exception; end

class OpenSSL::PKey::EC < ::OpenSSL::PKey::PKey
  include ::JSON::JWK::JWKizable::EC
end

class OpenSSL::PKey::RSA < ::OpenSSL::PKey::PKey
  include ::JSON::JWK::JWKizable::RSA
end
