# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_model_serializers` gem.
# Please instead update this file by running `bin/tapioca gem active_model_serializers`.


# source://active_model_serializers//lib/action_controller/serialization.rb#6
module ActionController
  class << self
    # source://actionpack/7.1.5/lib/action_controller/metal/renderers.rb#7
    def add_renderer(key, &block); end

    # source://actionpack/7.1.5/lib/action_controller/deprecator.rb#4
    def deprecator; end

    # source://actionpack/7.1.5/lib/action_controller/metal/renderers.rb#12
    def remove_renderer(key); end
  end
end

# source://active_model_serializers//lib/action_controller/serialization.rb#7
module ActionController::Serialization
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActionController::Renderers

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::Renderers::ClassMethods
  mixes_in_class_methods ::ActionController::Serialization::ClassMethods

  # source://active_model_serializers//lib/action_controller/serialization.rb#67
  def _render_option_json(resource, options); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#67
  def _render_with_renderer_json(resource, options); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#43
  def get_serializer(resource, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#29
  def namespace_for_class(klass); end

  # source://active_model_serializers//lib/action_controller/serialization.rb#25
  def namespace_for_serializer; end

  # source://active_model_serializers//lib/action_controller/serialization.rb#37
  def serialization_scope; end

  # Deprecated
  #
  # @return [Boolean]
  #
  # source://active_model_serializers//lib/action_controller/serialization.rb#62
  def use_adapter?; end

  module GeneratedClassMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
    def _serialization_scope; end
    def _serialization_scope=(value); end
    def _serialization_scope?; end
  end

  module GeneratedInstanceMethods
    def _renderers; end
    def _renderers=(value); end
    def _renderers?; end
    def _serialization_scope; end
    def _serialization_scope=(value); end
    def _serialization_scope?; end
  end
end

# source://active_model_serializers//lib/action_controller/serialization.rb#12
module ActionController::Serialization::ClassMethods
  # source://active_model_serializers//lib/action_controller/serialization.rb#13
  def serialization_scope(scope); end
end

# ActiveModel::Serializer is an abstract class that is
# reified when subclassed to decorate a resource.
#
# source://active_model_serializers//lib/active_model/serializer/version.rb#3
module ActiveModel
  class << self
    # source://activemodel/7.1.5/lib/active_model/deprecator.rb#4
    def deprecator; end

    # source://activemodel/7.1.5/lib/active_model.rb#76
    def eager_load!; end

    # source://activemodel/7.1.5/lib/active_model/gem_version.rb#5
    def gem_version; end

    # source://activemodel/7.1.5/lib/active_model/version.rb#7
    def version; end
  end
end

# source://active_model_serializers//lib/active_model/serializable_resource.rb#6
class ActiveModel::SerializableResource
  class << self
    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_new(*_arg0, **_arg1, &_arg2); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def new(*args, &block); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/version.rb#4
class ActiveModel::Serializer
  include ::ActiveSupport::Configurable
  include ::ActiveModel::Serializer::Caching
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Configurable::ClassMethods
  extend ::ActiveModel::Serializer::Caching::ClassMethods

  # `scope_name` is set as :current_user by default in the controller.
  # If the instance does not have a method named `scope_name`, it
  # defines the method so that it calls the +scope+.
  #
  # @return [Serializer] a new instance of Serializer
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#319
  def initialize(object, options = T.unsafe(nil)); end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _links; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _links?; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _meta; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _meta?; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _reflections; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _reflections?; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _type; end

  # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
  def _type?; end

  # @see #serializable_hash
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#380
  def as_json(adapter_opts = T.unsafe(nil)); end

  # @param include_directive [JSONAPI::IncludeDirective] (defaults to the
  #   +default_include_directive+ config value when not provided)
  # @return [Enumerator<Association>]
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#348
  def associations(include_directive = T.unsafe(nil), include_slice = T.unsafe(nil)); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#414
  def associations_hash(adapter_options, options, adapter_instance); end

  # Return the +attributes+ of +object+ as presented
  # by the serializer.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#336
  def attributes(requested_attrs = T.unsafe(nil), reload = T.unsafe(nil)); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#403
  def attributes_hash(_adapter_options, options, adapter_instance); end

  # Used by adapter as resource root.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#385
  def json_key; end

  # END SERIALIZER MACROS
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#314
  def object; end

  # END SERIALIZER MACROS
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#314
  def object=(_arg0); end

  # source://active_model_serializers//lib/active_model/serializer.rb#394
  def read_attribute_for_serialization(attr); end

  # END SERIALIZER MACROS
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#314
  def root; end

  # END SERIALIZER MACROS
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#314
  def root=(_arg0); end

  # END SERIALIZER MACROS
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#314
  def scope; end

  # END SERIALIZER MACROS
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#314
  def scope=(_arg0); end

  # associations, similar to how ActiveModel::Serializers::JSON is used
  # in ActiveRecord::Base.
  #
  # @return [Hash] containing the attributes and first level
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#366
  def serializable_hash(adapter_options = T.unsafe(nil), options = T.unsafe(nil), adapter_instance = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#330
  def success?; end

  # associations, similar to how ActiveModel::Serializers::JSON is used
  # in ActiveRecord::Base.
  #
  # @return [Hash] containing the attributes and first level
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#366
  def to_h(adapter_options = T.unsafe(nil), options = T.unsafe(nil), adapter_instance = T.unsafe(nil)); end

  # associations, similar to how ActiveModel::Serializers::JSON is used
  # in ActiveRecord::Base.
  #
  # @return [Hash] containing the attributes and first level
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#366
  def to_hash(adapter_options = T.unsafe(nil), options = T.unsafe(nil), adapter_instance = T.unsafe(nil)); end

  protected

  # Returns the value of attribute instance_options.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#425
  def instance_options; end

  # Sets the attribute instance_options
  #
  # @param value the value to set the attribute instance_options to.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#425
  def instance_options=(_arg0); end

  # Returns the value of attribute instance_reflections.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#425
  def instance_reflections; end

  # Sets the attribute instance_reflections
  #
  # @param value the value to set the attribute instance_reflections to.
  #
  # source://active_model_serializers//lib/active_model/serializer.rb#425
  def instance_reflections=(_arg0); end

  class << self
    # @return [Array<Symbol>] Key names of declared attributes
    # @see Serializer::attribute
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#197
    def _attributes; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _attributes_data; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _attributes_data=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _attributes_data?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_digest_file_path; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_digest_file_path=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_digest_file_path?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_except; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_except=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_except?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_key; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_key=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_key?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_only; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_only=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_only?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_options; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_options=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_options?; end

    # source://active_model_serializers//lib/active_model/serializer.rb#56
    def _deprecated_adapter; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _links; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _links=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _links?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _meta; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _meta=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _meta?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _reflections; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _reflections=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _reflections?; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _type; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _type=(value); end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _type?; end

    # Deprecated
    #
    # @see ActiveModelSerializers::Adapter.lookup
    #
    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def adapter(*args, &block); end

    # @example
    #   class AdminAuthorSerializer < ActiveModel::Serializer
    #   attributes :id, :recent_edits
    #   attribute :name, key: :title
    #
    #   attribute :full_name do
    #   "#{object.first_name} #{object.last_name}"
    #   end
    #
    #   def recent_edits
    #   object.edits.last(5)
    #   end
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#226
    def attribute(attr, options = T.unsafe(nil), &block); end

    # @example
    #   class AdminAuthorSerializer < ActiveModel::Serializer
    #   attributes :id, :name, :recent_edits
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#206
    def attributes(*attrs); end

    # @example
    #   belongs_to :author, serializer: AuthorSerializer
    # @param name [Symbol] of the association
    # @param options [Hash<Symbol => any>] for the reflection
    # @return [void]
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#249
    def belongs_to(name, options = T.unsafe(nil), &block); end

    # Find a serializer from a class and caches the lookup.
    # Preferentially returns:
    #   1. class name appended with "Serializer"
    #   2. try again with superclass, if present
    #   3. nil
    #
    # @api private
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#84
    def get_serializer_for(klass, namespace = T.unsafe(nil)); end

    # @example
    #   has_many :comments, serializer: CommentSummarySerializer
    # @param name [Symbol] of the association
    # @param options [Hash<Symbol => any>] for the reflection
    # @return [void]
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#238
    def has_many(name, options = T.unsafe(nil), &block); end

    # @example
    #   has_one :author, serializer: AuthorSerializer
    # @param name [Symbol] of the association
    # @param options [Hash<Symbol => any>] for the reflection
    # @return [void]
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#260
    def has_one(name, options = T.unsafe(nil), &block); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#104
    def include_directive_from_options(options); end

    # @private
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#188
    def inherited(base); end

    # Define a link on a serializer.
    #
    # @example
    #   link(:self) { resource_url(object) }
    # @example
    #   link(:self) { "http://example.com/resource/#{object.id}" }
    # @example
    #   link :resource, "http://example.com/resource"
    # @example
    #   link(:callback, if: :internal?), { "http://example.com/callback" }
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#285
    def link(name, *args, &block); end

    # Set the JSON API meta attribute of a serializer.
    #
    # @example
    #   class AdminAuthorSerializer < ActiveModel::Serializer
    #   meta { stuff: 'value' }
    # @example
    #   meta do
    #   { comment_count: object.comments.count }
    #   end
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#300
    def meta(value = T.unsafe(nil), &block); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#115
    def serialization_adapter_instance; end

    # @param resource [ActiveRecord::Base, ActiveModelSerializers::Model]
    # @return [ActiveModel::Serializer] Preferentially returns
    #   1. resource.serializer_class
    #   2. ArraySerializer when resource is a collection
    #   3. options[:serializer]
    #   4. lookup serializer when resource is a Class
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#43
    def serializer_for(resource_or_class, options = T.unsafe(nil)); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#65
    def serializer_lookup_chain_for(klass, namespace = T.unsafe(nil)); end

    # Used to cache serializer name => serializer class
    # when looked up by Serializer.get_serializer_for.
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#74
    def serializers_cache; end

    # Set the JSON API type of a serializer.
    #
    # @example
    #   class AdminAuthorSerializer < ActiveModel::Serializer
    #   type 'authors'
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#308
    def type(type); end

    private

    # Add reflection and define {name} accessor.
    #
    # @api private
    # @param reflection [ActiveModel::Serializer::Reflection]
    # @return [void]
    #
    # source://active_model_serializers//lib/active_model/serializer.rb#269
    def associate(reflection); end
  end
end

# @deprecated Use ActiveModelSerializers::Adapter instead
#
# source://active_model_serializers//lib/active_model/serializer/adapter.rb#9
module ActiveModel::Serializer::Adapter
  class << self
    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_adapter_class(adapter, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_adapter_map(&block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_adapters(&block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_create(*_arg0, **_arg1, &_arg2); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_lookup(adapter, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#49
    def _deprecated_register(*_arg0, **_arg1, &_arg2); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def adapter_class(*args, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def adapter_map(*args, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def adapters(*args, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def create(*args, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def lookup(*args, &block); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def register(*args, &block); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/adapter/attributes.rb#6
class ActiveModel::Serializer::Adapter::Attributes
  # @return [Attributes] a new instance of Attributes
  #
  # source://active_model_serializers//lib/active_model/serializer/adapter/attributes.rb#7
  def initialize(serializer, options = T.unsafe(nil)); end

  class << self
    def _deprecated_new(*_arg0); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def new(*args, &block); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/adapter/base.rb#6
class ActiveModel::Serializer::Adapter::Base
  # :nocov:
  #
  # @return [Base] a new instance of Base
  #
  # source://active_model_serializers//lib/active_model/serializer/adapter/base.rb#13
  def initialize(serializer, options = T.unsafe(nil)); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def inherited(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/adapter/json.rb#6
class ActiveModel::Serializer::Adapter::Json
  # @return [Json] a new instance of Json
  #
  # source://active_model_serializers//lib/active_model/serializer/adapter/json.rb#7
  def initialize(serializer, options = T.unsafe(nil)); end

  class << self
    def _deprecated_new(*_arg0); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def new(*args, &block); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/adapter/json_api.rb#6
class ActiveModel::Serializer::Adapter::JsonApi
  # @return [JsonApi] a new instance of JsonApi
  #
  # source://active_model_serializers//lib/active_model/serializer/adapter/json_api.rb#7
  def initialize(serializer, options = T.unsafe(nil)); end

  class << self
    def _deprecated_new(*_arg0); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def new(*args, &block); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/adapter/null.rb#6
class ActiveModel::Serializer::Adapter::Null
  # @return [Null] a new instance of Null
  #
  # source://active_model_serializers//lib/active_model/serializer/adapter/null.rb#7
  def initialize(serializer, options = T.unsafe(nil)); end

  class << self
    def _deprecated_new(*_arg0); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def new(*args, &block); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/array_serializer.rb#7
class ActiveModel::Serializer::ArraySerializer < ::ActiveModel::Serializer::CollectionSerializer
  class << self
    def _deprecated_new(*_arg0); end

    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#37
    def new(*args, &block); end
  end
end

# This class holds all information about serializer's association.
#
# @api private
#
# source://active_model_serializers//lib/active_model/serializer/association.rb#10
class ActiveModel::Serializer::Association < ::Struct
  # @api private
  # @return [Association] a new instance of Association
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#14
  def initialize(*_arg0); end

  # Returns the value of attribute association_options
  #
  # @return [Object] the current value of association_options
  def association_options; end

  # Sets the attribute association_options
  #
  # @param value [Object] the value to set the attribute association_options to.
  # @return [Object] the newly set value
  def association_options=(_); end

  # @api private
  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#43
  def belongs_to?; end

  # source://active_model_serializers//lib/active_model/serializer/association.rb#12
  def collection?(*_arg0, **_arg1, &_arg2); end

  # source://active_model_serializers//lib/active_model/serializer/association.rb#12
  def include_data?(*_arg0, **_arg1, &_arg2); end

  # @api private
  # @return [Symbol]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#23
  def key; end

  # @api private
  # @return [True, False]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#28
  def key?; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#11
  def lazy_association; end

  # @api private
  # @return [Hash]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#33
  def links; end

  # This gets mutated, so cannot use the cached reflection_options
  #
  # @api private
  # @return [Hash, nil]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#39
  def meta; end

  # @api private
  # @return [Symbol]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#20
  def name(*_arg0, **_arg1, &_arg2); end

  # source://active_model_serializers//lib/active_model/serializer/association.rb#12
  def object(*_arg0, **_arg1, &_arg2); end

  # @api private
  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#47
  def polymorphic?; end

  # Returns the value of attribute reflection
  #
  # @return [Object] the current value of reflection
  def reflection; end

  # Sets the attribute reflection
  #
  # @param value [Object] the value to set the attribute reflection to.
  # @return [Object] the newly set value
  def reflection=(_); end

  # source://active_model_serializers//lib/active_model/serializer/association.rb#70
  def reflection_options(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/association.rb#52
  def serializable_hash(adapter_options, adapter_instance); end

  # source://active_model_serializers//lib/active_model/serializer/association.rb#12
  def virtual_value(*_arg0, **_arg1, &_arg2); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Holds all the meta-data about an attribute as it was specified in the
# ActiveModel::Serializer class.
#
# @example
#   class PostSerializer < ActiveModel::Serializer
#   attribute :content
#   attribute :name, key: :title
#   attribute :email, key: :author_email, if: :user_logged_in?
#   attribute :preview do
#   truncate(object.content)
#   end
#
#   def user_logged_in?
#   current_user.logged_in?
#   end
#   end
#
# source://active_model_serializers//lib/active_model/serializer/attribute.rb#24
class ActiveModel::Serializer::Attribute < ::ActiveModel::Serializer::Field; end

# @api private
#
# source://active_model_serializers//lib/active_model/serializer/belongs_to_reflection.rb#6
class ActiveModel::Serializer::BelongsToReflection < ::ActiveModel::Serializer::Reflection
  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/belongs_to_reflection.rb#8
  def foreign_key_on; end
end

# source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#6
module ActiveModel::Serializer::Caching
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModel::Serializer::Caching::ClassMethods

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#270
  def cache_key(adapter_instance); end

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#280
  def expand_cache_key(parts); end

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#232
  def fetch(adapter_instance, cache_options = T.unsafe(nil), key = T.unsafe(nil)); end

  # INSTANCE METHODS
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#223
  def fetch_attributes(fields, cached_attributes, adapter_instance); end

  # 1. Determine cached fields from serializer class options
  # 2. Get non_cached_fields and fetch cache_fields
  # 3. Merge the two hashes using adapter_instance#fragment_cache
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#246
  def fetch_attributes_fragment(adapter_instance, cached_attributes = T.unsafe(nil)); end

  # Use object's cache_key if available, else derive a key from the object
  # Pass the `key` option to the `cache` declaration or override this method to customize the cache key
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#286
  def object_cache_key; end

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#300
  def serializer_class; end

  module GeneratedClassMethods
    def _cache; end
    def _cache=(value); end
    def _cache?; end
    def _cache_digest_file_path; end
    def _cache_digest_file_path=(value); end
    def _cache_digest_file_path?; end
    def _cache_except; end
    def _cache_except=(value); end
    def _cache_except?; end
    def _cache_key; end
    def _cache_key=(value); end
    def _cache_key?; end
    def _cache_only; end
    def _cache_only=(value); end
    def _cache_only?; end
    def _cache_options; end
    def _cache_options=(value); end
    def _cache_options?; end
  end

  module GeneratedInstanceMethods; end
end

# Matches
#  "c:/git/emberjs/ember-crm-backend/app/serializers/lead_serializer.rb:1:in `<top (required)>'"
#  AND
#  "/c/git/emberjs/ember-crm-backend/app/serializers/lead_serializer.rb:1:in `<top (required)>'"
#  AS
#  c/git/emberjs/ember-crm-backend/app/serializers/lead_serializer.rb
#
# source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#34
ActiveModel::Serializer::Caching::CALLER_FILE = T.let(T.unsafe(nil), Regexp)

# source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#43
module ActiveModel::Serializer::Caching::ClassMethods
  # maps attribute value to explicit key name
  #
  # @api private
  # @see Serializer::attribute
  # @see Serializer::fragmented_attributes
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#78
  def _attributes_keys; end

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#50
  def _cache_digest; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#70
  def _skip_digest?; end

  # Enables a serializer to be automatically cached
  #
  # Sets +::_cache+ object to <tt>ActionController::Base.cache_store</tt>
  #   when Rails.configuration.action_controller.perform_caching
  #
  # https://github.com/rails-api/active_model_serializers/pull/1249#issuecomment-146567837
  #
  # @example
  #   class PostSerializer < ActiveModel::Serializer
  #   cache key: 'post', expires_in: 3.hours
  #   attributes :title, :body
  #
  #   has_many :comments
  #   end
  # @param options [Hash] with valid keys:
  #   cache_store    : @see ::_cache
  #   key            : @see ::_cache_key
  #   only           : @see ::_cache_only
  #   except         : @see ::_cache_except
  #   skip_digest    : does not include digest in cache_key
  #   all else       : @see ::_cache_options
  # @todo require less code comments. See
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#120
  def cache(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#165
  def cache_enabled?; end

  # Read cache from cache_store
  # Used in CollectionSerializer to set :cached_attributes
  #
  # @return [Hash]
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#177
  def cache_read_multi(collection_serializer, adapter_instance, include_directive); end

  # The canonical method for getting the cache store for the serializer.
  #
  # @return [nil] when _cache is not set (i.e. when `cache` has not been called)
  # @return [._cache] when _cache is not the NullStore
  # @return [ActiveModelSerializers.config.cache_store] when _cache is the NullStore.
  #   This is so we can use `cache` being called to mean the serializer should be cached
  #   even if ActiveModelSerializers.config.cache_store has not yet been set.
  #   That means that when _cache is the NullStore and ActiveModelSerializers.config.cache_store
  #   is configured, `cache_store` becomes `ActiveModelSerializers.config.cache_store`.
  # @return [nil] when _cache is the NullStore and ActiveModelSerializers.config.cache_store is nil.
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#155
  def cache_store; end

  # Hashes contents of file for +_cache_digest+
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#56
  def digest_caller_file(caller_line); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#169
  def fragment_cache_enabled?; end

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#86
  def fragmented_attributes; end

  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#44
  def inherited(base); end

  # @return [String, nil] the cache_key of the serializer or nil
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#215
  def object_cache_key(serializer, adapter_instance); end

  # Find all cache_key for the collection_serializer
  #
  # @param serializers [ActiveModel::Serializer::CollectionSerializer]
  # @param adapter_instance [ActiveModelSerializers::Adapter::Base]
  # @param include_directive [JSONAPI::IncludeDirective]
  # @return [Array] all cache_key of collection_serializer
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#192
  def object_cache_keys(collection_serializer, adapter_instance, include_directive); end

  # Value is from ActiveModelSerializers.config.perform_caching. Is used to
  # globally enable or disable all serializer caching, just like
  # Rails.configuration.action_controller.perform_caching, which is its
  # default value in a Rails application.
  # Memoizes value of config first time it is called with a non-nil value.
  #
  # @return [true, false]
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#138
  def perform_caching; end

  # Value is from ActiveModelSerializers.config.perform_caching. Is used to
  # globally enable or disable all serializer caching, just like
  # Rails.configuration.action_controller.perform_caching, which is its
  # default value in a Rails application.
  # Memoizes value of config first time it is called with a non-nil value.
  #
  # @return [true, false]
  #
  # source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#138
  def perform_caching?; end
end

# source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#5
class ActiveModel::Serializer::CollectionSerializer
  include ::Enumerable

  # @return [CollectionSerializer] a new instance of CollectionSerializer
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#11
  def initialize(resources, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#7
  def each(*_arg0, **_arg1, &_arg2); end

  # TODO: unify naming of root, json_key, and _type.  Right now, a serializer's
  # json_key comes from the root option or the object's model name, by default.
  # But, if a dev defines a custom `json_key` method with an explicit value,
  # we have no simple way to know that it is safe to call that instance method.
  # (which is really a class property at this point, anyhow).
  # Disabling cop since it's good to highlight the complexity of this method by
  # including all the logic right here.
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#39
  def json_key; end

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#9
  def object; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#59
  def paginated?; end

  # Returns the value of attribute root.
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#9
  def root; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#23
  def serializable_hash(adapter_options, options, adapter_instance); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#18
  def success?; end

  protected

  # Returns the value of attribute options.
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#70
  def options; end

  # Returns the value of attribute serializers.
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#70
  def serializers; end

  private

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#74
  def raise_cannot_infer_root_key_error?; end

  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#85
  def serializer_from_resource(resource, serializer_context_class, options); end

  # source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#78
  def serializers_from_resources; end
end

# source://active_model_serializers//lib/active_model/serializer/collection_serializer.rb#66
class ActiveModel::Serializer::CollectionSerializer::CannotInferRootKeyError < ::StandardError; end

# source://active_model_serializers//lib/active_model/serializer/error_serializer.rb#5
class ActiveModel::Serializer::ErrorSerializer < ::ActiveModel::Serializer
  # @return [Hash<field_name,Array<error_message>>]
  #
  # source://active_model_serializers//lib/active_model/serializer/error_serializer.rb#7
  def as_json; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/error_serializer.rb#11
  def success?; end
end

# source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#7
class ActiveModel::Serializer::ErrorsSerializer
  include ::Enumerable

  # @return [ErrorsSerializer] a new instance of ErrorsSerializer
  #
  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#12
  def initialize(resources, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#9
  def each(*_arg0, **_arg1, &_arg2); end

  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#25
  def json_key; end

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#10
  def object; end

  # Returns the value of attribute root.
  #
  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#10
  def root; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#21
  def success?; end

  protected

  # Returns the value of attribute serializers.
  #
  # source://active_model_serializers//lib/active_model/serializer/errors_serializer.rb#31
  def serializers; end
end

# Holds all the meta-data about a field (i.e. attribute or association) as it was
# specified in the ActiveModel::Serializer class.
# Notice that the field block is evaluated in the context of the serializer.
#
# source://active_model_serializers//lib/active_model/serializer/field.rb#8
class ActiveModel::Serializer::Field < ::Struct
  # @return [Field] a new instance of Field
  #
  # source://active_model_serializers//lib/active_model/serializer/field.rb#9
  def initialize(*_arg0); end

  # Returns the value of attribute block
  #
  # @return [Object] the current value of block
  def block; end

  # Sets the attribute block
  #
  # @param value [Object] the value to set the attribute block to.
  # @return [Object] the newly set value
  def block=(_); end

  # Decide whether the field should be serialized by the given serializer instance.
  #
  # @api private
  # @param The [Serializer] serializer instance
  # @return [Bool]
  #
  # source://active_model_serializers//lib/active_model/serializer/field.rb#35
  def excluded?(serializer); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  # Compute the actual value of a field for a given serializer instance.
  #
  # @api private
  # @param The [Serializer] serializer instance for which the value is computed.
  # @return [Object] value
  #
  # source://active_model_serializers//lib/active_model/serializer/field.rb#21
  def value(serializer); end

  private

  # source://active_model_serializers//lib/active_model/serializer/field.rb#87
  def condition; end

  # source://active_model_serializers//lib/active_model/serializer/field.rb#76
  def condition_type; end

  # source://active_model_serializers//lib/active_model/serializer/field.rb#59
  def evaluate_condition(serializer); end

  # source://active_model_serializers//lib/active_model/serializer/field.rb#48
  def validate_condition!; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://active_model_serializers//lib/active_model/serializer/fieldset.rb#5
class ActiveModel::Serializer::Fieldset
  # @return [Fieldset] a new instance of Fieldset
  #
  # source://active_model_serializers//lib/active_model/serializer/fieldset.rb#6
  def initialize(fields); end

  # source://active_model_serializers//lib/active_model/serializer/fieldset.rb#10
  def fields; end

  # source://active_model_serializers//lib/active_model/serializer/fieldset.rb#14
  def fields_for(type); end

  protected

  # Returns the value of attribute raw_fields.
  #
  # source://active_model_serializers//lib/active_model/serializer/fieldset.rb#20
  def raw_fields; end

  private

  # source://active_model_serializers//lib/active_model/serializer/fieldset.rb#24
  def parsed_fields; end
end

# @api private
#
# source://active_model_serializers//lib/active_model/serializer/has_many_reflection.rb#6
class ActiveModel::Serializer::HasManyReflection < ::ActiveModel::Serializer::Reflection
  # @api private
  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/has_many_reflection.rb#7
  def collection?; end
end

# @api private
#
# source://active_model_serializers//lib/active_model/serializer/has_one_reflection.rb#6
class ActiveModel::Serializer::HasOneReflection < ::ActiveModel::Serializer::Reflection; end

# @api private
#
# source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#6
class ActiveModel::Serializer::LazyAssociation < ::Struct
  # Returns the value of attribute association_options
  #
  # @return [Object] the current value of association_options
  def association_options; end

  # Sets the attribute association_options
  #
  # @param value [Object] the value to set the attribute association_options to.
  # @return [Object] the newly set value
  def association_options=(_); end

  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#9
  def collection?(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#15
  def eval_reflection_block; end

  # @api private
  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#24
  def include_data?; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#15
  def object; end

  # Returns the value of attribute reflection
  #
  # @return [Object] the current value of reflection
  def reflection; end

  # Sets the attribute reflection
  #
  # @param value [Object] the value to set the attribute reflection to.
  # @return [Object] the newly set value
  def reflection=(_); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#11
  def reflection_options; end

  # @api private
  # @return [ActiveModel::Serializer, nil]
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#32
  def serializer; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#46
  def serializer_class; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#42
  def virtual_value; end

  private

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#55
  def cached_result; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#86
  def instantiate_collection_serializer(object); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#77
  def instantiate_serializer(object); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#93
  def namespace; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#59
  def serialize_object!(object); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Holds all the data about a serializer link
#
# @example
#   class PostSerializer < ActiveModel::Serializer
#   link :callback, if: :internal? do
#   object.callback_link
#   end
#
#   def internal?
#   instance_options[:internal] == true
#   end
#   end
#
# source://active_model_serializers//lib/active_model/serializer/link.rb#20
class ActiveModel::Serializer::Link < ::ActiveModel::Serializer::Field; end

# source://active_model_serializers//lib/active_model/serializer/lint.rb#5
module ActiveModel::Serializer::Lint; end

# == Active \Model \Serializer \Lint \Tests
#
# You can test whether an object is compliant with the Active \Model \Serializers
# API by including <tt>ActiveModel::Serializer::Lint::Tests</tt> in your TestCase.
# It will include tests that tell you whether your object is fully compliant,
# or if not, which aspects of the API are not implemented.
#
# Note an object is not required to implement all APIs in order to work
# with Active \Model \Serializers. This module only intends to provide guidance in case
# you want all features out of the box.
#
# These tests do not attempt to determine the semantic correctness of the
# returned values. For instance, you could implement <tt>serializable_hash</tt> to
# always return +{}+, and the tests would pass. It is up to you to ensure
# that the values are semantically meaningful.
#
# source://active_model_serializers//lib/active_model/serializer/lint.rb#21
module ActiveModel::Serializer::Lint::Tests
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#126
  def test_active_model_errors; end

  # source://active_model_serializers//lib/active_model/serializer/lint.rb#130
  def test_active_model_errors_human_attribute_name; end

  # source://active_model_serializers//lib/active_model/serializer/lint.rb#135
  def test_active_model_errors_lookup_ancestors; end

  # Passes if the object responds to <tt>as_json</tt> and if it takes
  # zero or one arguments.
  # Fails otherwise.
  #
  # <tt>as_json</tt> returns a hash representation of a serialized object.
  # It may delegate to <tt>serializable_hash</tt>
  # Typically, it is implemented either by including ActiveModel::Serialization
  # which includes ActiveModel::Serializers::JSON.
  # or by the JSON gem when required.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#58
  def test_as_json; end

  # Passes if the object responds to <tt>cache_key</tt>
  # Fails otherwise.
  #
  # <tt>cache_key</tt> returns a (self-expiring) unique key for the object,
  # and is part of the (self-expiring) cache_key, which is used by the
  # adapter. It is not required unless caching is enabled.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#83
  def test_cache_key; end

  # Passes if the object responds to <tt>id</tt> and if it takes no
  # arguments.
  # Fails otherwise.
  #
  # <tt>id</tt> returns a unique identifier for the object.
  # It is not required unless caching is enabled.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#108
  def test_id; end

  # Passes if the object's class responds to <tt>model_name</tt> and if it
  # is in an instance of +ActiveModel::Name+.
  # Fails otherwise.
  #
  # <tt>model_name</tt> returns an ActiveModel::Name instance.
  # It is used by the serializer to identify the object's type.
  # It is not required unless caching is enabled.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#120
  def test_model_name; end

  # Passes if the object responds to <tt>read_attribute_for_serialization</tt>
  # and if it requires one argument (the attribute to be read).
  # Fails otherwise.
  #
  # <tt>read_attribute_for_serialization</tt> gets the attribute value for serialization
  # Typically, it is implemented by including ActiveModel::Serialization.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#40
  def test_read_attribute_for_serialization; end

  # Passes if the object responds to <tt>serializable_hash</tt> and if it takes
  # zero or one arguments.
  # Fails otherwise.
  #
  # <tt>serializable_hash</tt> returns a hash representation of a object's attributes.
  # Typically, it is implemented by including ActiveModel::Serialization.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#28
  def test_serializable_hash; end

  # Passes if the object responds to <tt>to_json</tt> and if it takes
  # zero or one arguments.
  # Fails otherwise.
  #
  # <tt>to_json</tt> returns a string representation (JSON) of a serialized object.
  # It may be called on the result of <tt>as_json</tt>.
  # Typically, it is implemented on all objects when the JSON gem is required.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#71
  def test_to_json; end

  # Passes if the object responds to <tt>updated_at</tt> and if it takes no
  # arguments.
  # Fails otherwise.
  #
  # <tt>updated_at</tt> returns a Time object or iso8601 string and
  # is part of the (self-expiring) cache_key, which is used by the adapter.
  # It is not required unless caching is enabled.
  #
  # source://active_model_serializers//lib/active_model/serializer/lint.rb#96
  def test_updated_at; end

  private

  # source://active_model_serializers//lib/active_model/serializer/lint.rb#146
  def assert_instance_of(result, name); end

  # source://active_model_serializers//lib/active_model/serializer/lint.rb#142
  def resource; end
end

# source://active_model_serializers//lib/active_model/serializer/null.rb#5
class ActiveModel::Serializer::Null < ::ActiveModel::Serializer
  # source://active_model_serializers//lib/active_model/serializer/null.rb#10
  def associations(*_arg0); end

  # source://active_model_serializers//lib/active_model/serializer/null.rb#6
  def attributes(*_arg0); end

  # source://active_model_serializers//lib/active_model/serializer/null.rb#14
  def serializable_hash(*_arg0); end

  class << self
    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _attributes_data; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _cache_digest_file_path; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _links; end

    # source://activesupport/7.1.5/lib/active_support/option_merger.rb#28
    def _reflections; end
  end
end

# source://active_model_serializers//lib/active_model/serializer/lazy_association.rb#7
ActiveModel::Serializer::REFLECTION_OPTIONS = T.let(T.unsafe(nil), Array)

# Holds all the meta-data about an association as it was specified in the
# ActiveModel::Serializer class.
#
#  Specifically, the association 'comments' is evaluated two different ways:
#  1) as 'comments' and named 'comments'.
#  2) as 'object.comments.last(1)' and named 'last_comments'.
#
#  PostSerializer._reflections # =>
#    # {
#    #   author: HasOneReflection.new(:author, serializer: AuthorSerializer),
#    #   comments: HasManyReflection.new(:comments)
#    #   last_comments: HasManyReflection.new(:comments, { key: :last_comments }, #<Block>)
#    #   secret_meta_data: HasManyReflection.new(:secret_meta_data, { if: :is_admin? })
#    # }
#
# So you can inspect reflections in your Adapters.
#
# @example
#   class PostSerializer < ActiveModel::Serializer
#   has_one :author, serializer: AuthorSerializer
#   belongs_to :boss, type: :users, foreign_key: :boss_id
#   has_many :comments
#   has_many :comments, key: :last_comments do
#   object.comments.last(1)
#   end
#   has_many :secret_meta_data, if: :is_admin?
#
#   has_one :blog do |serializer|
#   meta count: object.roles.count
#   serializer.cached_blog
#   end
#
#   private
#
#   def cached_blog
#   cache_store.fetch("cached_blog:#{object.updated_at}") do
#   Blog.find(object.blog_id)
#   end
#   end
#
#   def is_admin?
#   current_user.admin?
#   end
#   end
#
# source://active_model_serializers//lib/active_model/serializer/reflection.rb#52
class ActiveModel::Serializer::Reflection < ::ActiveModel::Serializer::Field
  # @return [Reflection] a new instance of Reflection
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#55
  def initialize(*_arg0); end

  # Build association. This method is used internally to
  # build serializer's association by its reflection.
  #
  # @api private
  # @example
  #   # Given the following serializer defined:
  #   class PostSerializer < ActiveModel::Serializer
  #   has_many :comments, serializer: CommentSummarySerializer
  #   end
  #
  #   # Then you instantiate your serializer
  #   post_serializer = PostSerializer.new(post, foo: 'bar') #
  #   # to build association for comments you need to get reflection
  #   comments_reflection = PostSerializer._reflections.detect { |r| r.name == :comments }
  #   # and #build_association
  #   comments_reflection.build_association(post_serializer, foo: 'bar')
  # @param parent_serializer [Serializer] for given association
  # @param parent_serializer_options [Hash{Symbol => Object}]
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#197
  def build_association(parent_serializer, parent_serializer_options, include_slice = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#138
  def collection?; end

  # Returns the value of attribute foreign_key.
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#53
  def foreign_key; end

  # @api private
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#173
  def foreign_key_on; end

  # @api public
  # @example
  #   has_one :blog do
  #   include_data false
  #   link :self, 'a link'
  #   link :related, 'another link'
  #   end
  #
  #   has_one :blog do
  #   include_data false
  #   link :self, 'a link'
  #   link :related, 'another link'
  #   end
  #
  #   belongs_to :reviewer do
  #   meta name: 'Dan Brown'
  #   include_data true
  #   end
  #
  #   has_many :tags, serializer: TagSerializer do
  #   link :self, '//example.com/link_author/relationships/tags'
  #   include_data :if_sideloaded
  #   end
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#133
  def include_data(value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#142
  def include_data?(include_slice); end

  # @api public
  # @example
  #   has_one :blog do
  #   include_data false
  #   link :self, 'a link'
  #   link :related, 'another link'
  #   link :self, '//example.com/link_author/relationships/bio'
  #   id = object.profile.id
  #   link :related do
  #   "//example.com/profiles/#{id}" if id != 123
  #   end
  #   link :related do
  #   ids = object.likes.map(&:id).join(',')
  #   href "//example.com/likes/#{ids}"
  #   meta ids: ids
  #   end
  #   end
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#90
  def link(name, value = T.unsafe(nil), &block); end

  # @api public
  # @example
  #   has_one :blog do
  #   include_data false
  #   meta(id: object.blog.id)
  #   meta liked: object.likes.any?
  #   link :self do
  #   href object.blog.id.to_s
  #   meta(id: object.blog.id)
  #   end
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#105
  def meta(value = T.unsafe(nil), &block); end

  # Returns the value of attribute type.
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#53
  def type; end

  # @param serializer [ActiveModel::Serializer]
  # @return [:nil, associated resource or resource collection]
  # @yield [ActiveModel::Serializer]
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#155
  def value(serializer, include_slice); end

  protected

  # used in instance exec
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#209
  def object; end

  # used in instance exec
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#209
  def object=(_arg0); end

  # used in instance exec
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#209
  def scope; end

  # used in instance exec
  #
  # source://active_model_serializers//lib/active_model/serializer/reflection.rb#209
  def scope=(_arg0); end
end

# @see #serializable_hash for more details on these valid keys.
#
# source://active_model_serializers//lib/active_model/serializer.rb#20
ActiveModel::Serializer::SERIALIZABLE_HASH_VALID_KEYS = T.let(T.unsafe(nil), Array)

# source://active_model_serializers//lib/active_model/serializer/concerns/caching.rb#5
class ActiveModel::Serializer::UndefinedCacheKey < ::StandardError; end

# source://active_model_serializers//lib/active_model/serializer/version.rb#5
ActiveModel::Serializer::VERSION = T.let(T.unsafe(nil), String)

# Based on discussion in https://github.com/rails/rails/pull/23712#issuecomment-184977238,
# the JSON API media type will have its own format/renderer.
#
# > We recommend the media type be registered on its own as jsonapi
# when a jsonapi Renderer and deserializer (Http::Parameters::DEFAULT_PARSERS) are added.
#
# Usage:
#
# ActiveSupport.on_load(:action_controller) do
#   require 'active_model_serializers/register_jsonapi_renderer'
# end
#
# And then in controllers, use `render jsonapi: model` rather than `render json: model, adapter: :json_api`.
#
# For example, in a controller action, we can:
# respond_to do |format|
#   format.jsonapi { render jsonapi: model }
# end
#
# or
#
# render jsonapi: model
#
# No wrapper format needed as it does not apply (i.e. no `wrap_parameters format: [jsonapi]`)
#
# source://active_model_serializers//lib/active_model_serializers.rb#8
module ActiveModelSerializers
  extend ::ActiveSupport::Autoload

  class << self
    # source://active_model_serializers//lib/active_model_serializers.rb#27
    def config; end

    # Memoized default include directive
    #
    # @return [JSONAPI::IncludeDirective]
    #
    # source://active_model_serializers//lib/active_model_serializers.rb#42
    def default_include_directive; end

    # source://active_model_serializers//lib/active_model_serializers.rb#54
    def eager_load!; end

    # The file name and line number of the caller of the caller of this method.
    #
    # source://active_model_serializers//lib/active_model_serializers.rb#32
    def location_of_caller; end

    # Returns the value of attribute logger.
    #
    # source://active_model_serializers//lib/active_model_serializers.rb#24
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://active_model_serializers//lib/active_model_serializers.rb#24
    def logger=(_arg0); end

    # source://active_model_serializers//lib/active_model_serializers.rb#46
    def silence_warnings; end
  end
end

# source://active_model_serializers//lib/active_model_serializers/adapter.rb#4
module ActiveModelSerializers::Adapter
  extend ::ActiveSupport::Autoload

  class << self
    # @see ActiveModelSerializers::Adapter.lookup
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#29
    def adapter_class(adapter); end

    # @return [Hash<adapter_name, adapter_class>]
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#34
    def adapter_map; end

    # @return [Array<Symbol>] list of adapter names
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#39
    def adapters; end

    # :nocov:
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#18
    def configured_adapter; end

    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#22
    def create(resource, options = T.unsafe(nil)); end

    # @param adapter [String, Symbol, Class] name to fetch adapter by
    # @raise [UnknownAdapterError]
    # @return [ActiveModelSerializers::Adapter] subclass of Adapter
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#65
    def lookup(adapter); end

    # :nocov:
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#11
    def new(*args); end

    # Adds an adapter 'klass' with 'name' to the 'adapter_map'
    # Names are stringified and underscored
    #
    # @example
    #   AMS::Adapter.register(:my_adapter, MyAdapter)
    # @note The registered name strips out 'ActiveModelSerializers::Adapter::'
    #   so that registering 'ActiveModelSerializers::Adapter::Json' and
    #   'Json' will both register as 'json'.
    # @param name [Symbol, String, Class] name of the registered adapter
    # @param klass [Class] adapter class itself, optional if name is the class
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#52
    def register(name, klass = T.unsafe(nil)); end

    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#58
    def registered_name(adapter_class); end

    private

    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter.rb#83
    def find_by_name(adapter_name); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/adapter.rb#6
ActiveModelSerializers::Adapter::ADAPTER_MAP = T.let(T.unsafe(nil), Hash)

# source://active_model_serializers//lib/active_model_serializers/adapter/attributes.rb#5
class ActiveModelSerializers::Adapter::Attributes < ::ActiveModelSerializers::Adapter::Base
  # @return [Attributes] a new instance of Attributes
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/attributes.rb#6
  def initialize(*_arg0); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/attributes.rb#11
  def serializable_hash(options = T.unsafe(nil)); end

  private

  # source://active_model_serializers//lib/active_model_serializers/adapter/attributes.rb#21
  def fields_to_fieldset(fields); end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#7
class ActiveModelSerializers::Adapter::Base
  # @return [Base] a new instance of Base
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#49
  def initialize(serializer, options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#60
  def as_json(options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#64
  def cache_key; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#68
  def fragment_cache(cached_hash, non_cached_hash); end

  # Returns the value of attribute instance_options.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#47
  def instance_options; end

  # Subclasses that implement this method must first call
  #   options = serialization_options(options)
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#56
  def serializable_hash(_options = T.unsafe(nil)); end

  # Returns the value of attribute serializer.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#47
  def serializer; end

  private

  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#80
  def root; end

  # see https://github.com/rails-api/active_model_serializers/pull/965
  # When <tt>options</tt> is +nil+, sets it to +{}+
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#76
  def serialization_options(options); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#39
    def cache_key; end

    # Sets the default transform for the adapter.
    #
    # @return [Symbol] the default transform for the adapter
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#16
    def default_key_transform; end

    # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#43
    def fragment_cache(cached_hash, non_cached_hash); end

    # Automatically register adapters when subclassing
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#9
    def inherited(subclass); end

    # Determines the transform to use in order of precedence:
    #   adapter option, global config, adapter default.
    #
    # @param options [Object]
    # @return [Symbol] the transform to use
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#25
    def transform(options); end

    # Transforms the casing of the supplied value.
    #
    # @param value [Object] the value to be transformed
    # @param options [Object] serializable resource options
    # @return [Symbol] the default transform for the adapter
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/base.rb#35
    def transform_key_casing!(value, options); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json.rb#5
class ActiveModelSerializers::Adapter::Json < ::ActiveModelSerializers::Adapter::Base
  # source://active_model_serializers//lib/active_model_serializers/adapter/json.rb#14
  def meta; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json.rb#18
  def meta_key; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json.rb#6
  def serializable_hash(options = T.unsafe(nil)); end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#25
class ActiveModelSerializers::Adapter::JsonApi < ::ActiveModelSerializers::Adapter::Base
  extend ::ActiveSupport::Autoload

  # @return [JsonApi] a new instance of JsonApi
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#53
  def initialize(serializer, options = T.unsafe(nil)); end

  # {http://jsonapi.org/format/#errors JSON API Errors}
  # TODO: look into caching
  # definition:
  #   ☑ toplevel_errors array (required)
  #   ☐ toplevel_meta
  #   ☐ toplevel_jsonapi
  # structure:
  #   {
  #     errors: toplevel_errors,
  #     meta: toplevel_meta,
  #     jsonapi: toplevel_jsonapi
  #   }.reject! {|_,v| v.nil? }
  # prs:
  #  https://github.com/rails-api/active_model_serializers/pull/1004
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#174
  def failure_document; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#70
  def fragment_cache(cached_hash, non_cached_hash); end

  # {http://jsonapi.org/format/#crud Requests are transactional, i.e. success or failure}
  # {http://jsonapi.org/format/#document-top-level data and errors MUST NOT coexist in the same document.}
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#61
  def serializable_hash(*_arg0); end

  # {http://jsonapi.org/format/#document-top-level Primary data}
  # definition:
  #   ☐ toplevel_data (required)
  #   ☐ toplevel_included
  #   ☑ toplevel_meta
  #   ☑ toplevel_links
  #   ☑ toplevel_jsonapi
  # structure:
  #  {
  #    data: toplevel_data,
  #    included: toplevel_included,
  #    meta: toplevel_meta,
  #    links: toplevel_links,
  #    jsonapi: toplevel_jsonapi
  #  }.reject! {|_,v| v.nil? }
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#91
  def success_document; end

  protected

  # Returns the value of attribute fieldset.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#199
  def fieldset; end

  private

  # {http://jsonapi.org/format/#document-resource-object-attributes Document Resource Object Attributes}
  # attributes
  # definition:
  #   JSON Object
  #
  # patternProperties:
  #   ^(?!relationships$|links$)\\w[-\\w_]*$
  #
  # description:
  #   Members of the attributes object ("attributes") represent information about the resource
  #   object in which it's defined.
  #   Attributes may contain any valid JSON value
  # structure:
  #   {
  #     foo: 'bar'
  #   }
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#296
  def attributes_for(serializer, fields); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#338
  def data_for(serializer, include_slice); end

  # {http://jsonapi.org/format/#document-links Document Links}
  # links
  # definition:
  #  JSON Object
  #
  # properties:
  #   self    : URI
  #   related : link
  #
  # description:
  #   A resource object **MAY** contain references to other resource objects ("relationships").
  #   Relationships may be to-one or to-many. Relationships can be specified by including a member
  #   in a resource's links object.
  #
  #   A `self` member’s value is a URL for the relationship itself (a "relationship URL"). This
  #   URL allows the client to directly manipulate the relationship. For example, it would allow
  #   a client to remove an `author` from an `article` without deleting the people resource
  #   itself.
  # structure:
  #   {
  #     self: 'http://example.com/etc',
  #     related: link
  #   }.reject! {|_,v| v.nil? }
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#485
  def links_for(serializer); end

  # {http://jsonapi.org/format/#document-meta Docment Meta}
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#529
  def meta_for(serializer); end

  # {http://jsonapi.org/format/#fetching-pagination Pagination Links}
  # pagination
  # definition:
  #   first : pageObject
  #   last  : pageObject
  #   prev  : pageObject
  #   next  : pageObject
  # structure:
  #   {
  #     first: pageObject,
  #     last: pageObject,
  #     prev: pageObject,
  #     next: pageObject
  #   }
  #
  # pageObject
  # definition:
  #   oneOf
  #     URI
  #     null
  #
  # description:
  #   The <x> page of data
  # structure:
  #   if has_page?
  #     'http://example.com/some-page?page[number][x]'
  #   else
  #     nil
  #   end
  # prs:
  #   https://github.com/rails-api/active_model_serializers/pull/1041
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#524
  def pagination_links_for(serializer); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#269
  def process_relationship(serializer, include_slice); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#262
  def process_relationships(serializer, include_slice); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#248
  def process_resource(serializer, primary, include_slice = T.unsafe(nil)); end

  # {http://jsonapi.org/format/#document-resource-object-relationships Document Resource Object Relationship}
  # relationships
  # definition:
  #   JSON Object
  #
  # patternProperties:
  #   ^\\w[-\\w_]*$"
  #
  # properties:
  #   data : relationshipsData
  #   links
  #   meta
  #
  # description:
  #
  #   Members of the relationships object ("relationships") represent references from the
  #   resource object in which it's defined to other resource objects."
  # structure:
  #   {
  #     links: links,
  #     meta: meta,
  #     data: relationshipsData
  #   }.reject! {|_,v| v.nil? }
  #
  # prs:
  #   links
  #     [x] https://github.com/rails-api/active_model_serializers/pull/1454
  #   meta
  #     [x] https://github.com/rails-api/active_model_serializers/pull/1454
  #   polymorphic
  #     [ ] https://github.com/rails-api/active_model_serializers/pull/1420
  #
  # relationshipsData
  # definition:
  #   oneOf
  #     relationshipToOne
  #     relationshipToMany
  #
  # description:
  #   Member, whose value represents "resource linkage"
  # structure:
  #   if has_one?
  #     relationshipToOne
  #   else
  #     relationshipToMany
  #   end
  #
  # definition:
  #   anyOf
  #     null
  #     linkage
  #
  # relationshipToOne
  # description:
  #
  #   References to other resource objects in a to-one ("relationship"). Relationships can be
  #   specified by including a member in a resource's links object.
  #
  #   None: Describes an empty to-one relationship.
  # structure:
  #   if has_related?
  #     linkage
  #   else
  #     nil
  #   end
  #
  # relationshipToMany
  # definition:
  #   array of unique items of type 'linkage'
  #
  # description:
  #   An array of objects each containing "type" and "id" members for to-many relationships
  # structure:
  #   [
  #     linkage,
  #     linkage
  #   ]
  # prs:
  #   polymorphic
  #     [ ] https://github.com/rails-api/active_model_serializers/pull/1282
  #
  # linkage
  # definition:
  #   type (required) : String
  #   id   (required) : String
  #   meta
  #
  # description:
  #   The "type" and "id" to non-empty members.
  # structure:
  #   {
  #     type: 'required-type',
  #     id: 'required-id',
  #     meta: meta
  #   }.reject! {|_,v| v.nil? }
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#452
  def relationships_for(serializer, requested_associations, include_slice); end

  # {http://jsonapi.org/format/#document-resource-objects Document Resource Objects}
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#301
  def resource_object_for(serializer, include_slice = T.unsafe(nil)); end

  # {http://jsonapi.org/format/#document-resource-objects Primary data}
  # resource
  # definition:
  #   JSON Object
  #
  # properties:
  #   type (required) : String
  #   id   (required) : String
  #   attributes
  #   relationships
  #   links
  #   meta
  #
  # description:
  #   "Resource objects" appear in a JSON API document to represent resources
  # structure:
  #   {
  #     type: 'admin--some-user',
  #     id: '1336',
  #     attributes: attributes,
  #     relationships: relationships,
  #     links: links,
  #     meta: meta,
  #   }.reject! {|_,v| v.nil? }
  # prs:
  #   type
  #     https://github.com/rails-api/active_model_serializers/pull/1122
  #     [x] https://github.com/rails-api/active_model_serializers/pull/1213
  #     https://github.com/rails-api/active_model_serializers/pull/1216
  #     https://github.com/rails-api/active_model_serializers/pull/1029
  #   links
  #     [x] https://github.com/rails-api/active_model_serializers/pull/1246
  #     [x] url helpers https://github.com/rails-api/active_model_serializers/issues/1269
  #   meta
  #     [x] https://github.com/rails-api/active_model_serializers/pull/1340
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#238
  def resource_objects_for(serializers); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#38
    def default_key_transform; end

    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api.rb#42
    def fragment_cache(cached_hash, non_cached_hash, root = T.unsafe(nil)); end
  end
end

# NOTE(Experimental):
# This is an experimental feature. Both the interface and internals could be subject
# to changes.
#
# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#9
module ActiveModelSerializers::Adapter::JsonApi::Deserialization
  private

  # @api private
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#154
  def field_key(field, options); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#145
  def filter_fields(fields, options); end

  # Same as parse!, but returns an empty hash instead of raising InvalidDocument
  # on invalid payloads.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#85
  def parse(document, options = T.unsafe(nil)); end

  # Transform a JSON API document, containing a single data object,
  # into a hash that is ready for ActiveRecord::Base.new() and such.
  # Raises InvalidDocument if the payload is not properly formatted.
  #
  # @example
  #   document = {
  #   data: {
  #   id: 1,
  #   type: 'post',
  #   attributes: {
  #   title: 'Title 1',
  #   date: '2015-12-20'
  #   },
  #   associations: {
  #   author: {
  #   data: {
  #   type: 'user',
  #   id: 2
  #   }
  #   },
  #   second_author: {
  #   data: nil
  #   },
  #   comments: {
  #   data: [{
  #   type: 'comment',
  #   id: 3
  #   },{
  #   type: 'comment',
  #   id: 4
  #   }]
  #   }
  #   }
  #   }
  #   }
  #
  #   parse(document) #=>
  #   # {
  #   #   title: 'Title 1',
  #   #   date: '2015-12-20',
  #   #   author_id: 2,
  #   #   second_author_id: nil
  #   #   comment_ids: [3, 4]
  #   # }
  #
  #   parse(document, only: [:title, :date, :author],
  #   keys: { date: :published_at },
  #   polymorphic: [:author]) #=>
  #   # {
  #   #   title: 'Title 1',
  #   #   published_at: '2015-12-20',
  #   #   author_id: '2',
  #   #   author_type: 'people'
  #   # }
  # @param document [Hash|ActionController::Parameters]
  # @param options [Hash] only: Array of symbols of whitelisted fields.
  #   except: Array of symbols of blacklisted fields.
  #   keys: Hash of translated keys (e.g. :author => :user).
  #   polymorphic: Array of symbols of polymorphic fields.
  # @return [Hash]
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#77
  def parse!(document, options = T.unsafe(nil)); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#159
  def parse_attributes(attributes, options); end

  # Given an association name, and a relationship data attribute, build a hash
  # mapping the corresponding ActiveRecord attribute to the corresponding value.
  #
  # @api private
  # @example
  #   parse_relationship(:comments, [{ 'id' => '1', 'type' => 'comments' },
  #   { 'id' => '2', 'type' => 'comments' }],
  #   {})
  #   # => { :comment_ids => ['1', '2'] }
  #   parse_relationship(:author, { 'id' => '1', 'type' => 'users' }, {})
  #   # => { :author_id => '1' }
  #   parse_relationship(:author, nil, {})
  #   # => { :author_id => nil }
  # @param assoc_name [Symbol]
  # @param assoc_data [Hash]
  # @param options [Hash]
  # @return [Hash{Symbol, Object}]
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#183
  def parse_relationship(assoc_name, assoc_data, options); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#201
  def parse_relationships(relationships, options); end

  # @api private
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#208
  def transform_keys(hash, options); end

  # Checks whether a payload is compliant with the JSON API spec.
  #
  #
  # @api private
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#112
  def validate_payload(payload); end

  class << self
    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#154
    def field_key(field, options); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#145
    def filter_fields(fields, options); end

    # Same as parse!, but returns an empty hash instead of raising InvalidDocument
    # on invalid payloads.
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#85
    def parse(document, options = T.unsafe(nil)); end

    # Transform a JSON API document, containing a single data object,
    # into a hash that is ready for ActiveRecord::Base.new() and such.
    # Raises InvalidDocument if the payload is not properly formatted.
    #
    # @example
    #   document = {
    #   data: {
    #   id: 1,
    #   type: 'post',
    #   attributes: {
    #   title: 'Title 1',
    #   date: '2015-12-20'
    #   },
    #   associations: {
    #   author: {
    #   data: {
    #   type: 'user',
    #   id: 2
    #   }
    #   },
    #   second_author: {
    #   data: nil
    #   },
    #   comments: {
    #   data: [{
    #   type: 'comment',
    #   id: 3
    #   },{
    #   type: 'comment',
    #   id: 4
    #   }]
    #   }
    #   }
    #   }
    #   }
    #
    #   parse(document) #=>
    #   # {
    #   #   title: 'Title 1',
    #   #   date: '2015-12-20',
    #   #   author_id: 2,
    #   #   second_author_id: nil
    #   #   comment_ids: [3, 4]
    #   # }
    #
    #   parse(document, only: [:title, :date, :author],
    #   keys: { date: :published_at },
    #   polymorphic: [:author]) #=>
    #   # {
    #   #   title: 'Title 1',
    #   #   published_at: '2015-12-20',
    #   #   author_id: '2',
    #   #   author_type: 'people'
    #   # }
    # @param document [Hash|ActionController::Parameters]
    # @param options [Hash] only: Array of symbols of whitelisted fields.
    #   except: Array of symbols of blacklisted fields.
    #   keys: Hash of translated keys (e.g. :author => :user).
    #   polymorphic: Array of symbols of polymorphic fields.
    # @return [Hash]
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#77
    def parse!(document, options = T.unsafe(nil)); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#159
    def parse_attributes(attributes, options); end

    # Given an association name, and a relationship data attribute, build a hash
    # mapping the corresponding ActiveRecord attribute to the corresponding value.
    #
    # @api private
    # @example
    #   parse_relationship(:comments, [{ 'id' => '1', 'type' => 'comments' },
    #   { 'id' => '2', 'type' => 'comments' }],
    #   {})
    #   # => { :comment_ids => ['1', '2'] }
    #   parse_relationship(:author, { 'id' => '1', 'type' => 'users' }, {})
    #   # => { :author_id => '1' }
    #   parse_relationship(:author, nil, {})
    #   # => { :author_id => nil }
    # @param assoc_name [Symbol]
    # @param assoc_data [Hash]
    # @param options [Hash]
    # @return [Hash{Symbol, Object}]
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#183
    def parse_relationship(assoc_name, assoc_data, options); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#201
    def parse_relationships(relationships, options); end

    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#208
    def transform_keys(hash, options); end

    # Checks whether a payload is compliant with the JSON API spec.
    #
    #
    # @api private
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#112
    def validate_payload(payload); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/deserialization.rb#10
class ActiveModelSerializers::Adapter::JsonApi::Deserialization::InvalidDocument < ::ArgumentError; end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/error.rb#6
module ActiveModelSerializers::Adapter::JsonApi::Error
  class << self
    # definition:
    #   JSON Object
    #
    # properties:
    #   ☐ id      : String
    #   ☐ status  : String
    #   ☐ code    : String
    #   ☐ title   : String
    #   ☑ detail  : String
    #   ☐ links
    #   ☐ meta
    #   ☑ error_source
    #
    # description:
    #   id     : A unique identifier for this particular occurrence of the problem.
    #   status : The HTTP status code applicable to this problem, expressed as a string value
    #   code   : An application-specific error code, expressed as a string value.
    #   title  : A short, human-readable summary of the problem. It **SHOULD NOT** change from
    #     occurrence to occurrence of the problem, except for purposes of localization.
    #   detail : A human-readable explanation specific to this occurrence of the problem.
    # structure:
    #   {
    #     title: 'SystemFailure',
    #     detail: 'something went terribly wrong',
    #     status: '500'
    #   }.merge!(errorSource)
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/error.rb#49
    def attribute_error_objects(attribute_name, attribute_errors); end

    # errorSource
    # description:
    #   oneOf
    #     ☑ pointer   : String
    #     ☑ parameter : String
    #
    # description:
    #   pointer: A JSON Pointer RFC6901 to the associated entity in the request document e.g. "/data"
    #   for a primary data object, or "/data/attributes/title" for a specific attribute.
    #   https://tools.ietf.org/html/rfc6901
    #
    #   parameter: A string indicating which query parameter caused the error
    # structure:
    #   if is_attribute?
    #     {
    #       pointer: '/data/attributes/red-button'
    #     }
    #   else
    #     {
    #       parameter: 'pres'
    #     }
    #   end
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/error.rb#80
    def error_source(source_type, attribute_name); end

    # Builds a JSON API Errors Object
    # {http://jsonapi.org/format/#errors JSON API Errors}
    #
    # @param error_serializer [ActiveModel::Serializer::ErrorSerializer]
    # @return [Array<Symbol, Array<String>>] i.e. attribute_name, [attribute_errors]
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/error.rb#15
    def resource_errors(error_serializer, options); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/error.rb#8
class ActiveModelSerializers::Adapter::JsonApi::Error::UnknownSourceTypeError < ::ArgumentError; end

# toplevel_jsonapi
# definition:
#   JSON Object
#
# properties:
#   version : String
#   meta
#
# description:
#   An object describing the server's implementation
# structure:
#   {
#     version: ActiveModelSerializers.config.jsonapi_version,
#     meta: ActiveModelSerializers.config.jsonapi_toplevel_meta
#   }.reject! { |_, v| v.blank? }
# prs:
#   https://github.com/rails-api/active_model_serializers/pull/1050
#
# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#25
module ActiveModelSerializers::Adapter::JsonApi::Jsonapi
  private

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#28
  def add!(hash); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#32
  def include_object?; end

  # TODO: see if we can cache this
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#37
  def object; end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#28
    def add!(hash); end

    # @return [Boolean]
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#32
    def include_object?; end

    # TODO: see if we can cache this
    #
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/jsonapi.rb#37
    def object; end
  end
end

# link
# definition:
#  oneOf
#    linkString
#    linkObject
#
# description:
#   A link **MUST** be represented as either: a string containing the link's URL or a link
#   object."
# structure:
#   if href?
#     linkString
#   else
#     linkObject
#   end
#
# linkString
# definition:
#   URI
#
# description:
#   A string containing the link's URL.
# structure:
#  'http://example.com/link-string'
#
# linkObject
# definition:
#   JSON Object
#
# properties:
#   href (required) : URI
#   meta
# structure:
#   {
#     href: 'http://example.com/link-object',
#     meta: meta,
#   }.reject! {|_,v| v.nil? }
#
# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#43
class ActiveModelSerializers::Adapter::JsonApi::Link
  include ::ActiveModelSerializers::SerializationContext::UrlHelpers

  # @return [Link] a new instance of Link
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#46
  def initialize(serializer, value); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#69
  def as_json; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#59
  def href(value); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#64
  def meta(value); end

  protected

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#81
  def object; end

  # Returns the value of attribute scope.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/link.rb#81
  def scope; end
end

# meta
# definition:
#   JSON Object
#
# description:
#   Non-standard meta-information that can not be represented as an attribute or relationship.
# structure:
#   {
#     attitude: 'adjustable'
#   }
#
# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/meta.rb#16
class ActiveModelSerializers::Adapter::JsonApi::Meta
  # @return [Meta] a new instance of Meta
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/meta.rb#17
  def initialize(serializer); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/meta.rb#29
  def as_json; end

  protected

  # Returns the value of attribute object.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/meta.rb#35
  def object; end

  # Returns the value of attribute scope.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/meta.rb#35
  def scope; end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#6
class ActiveModelSerializers::Adapter::JsonApi::PaginationLinks
  # @return [PaginationLinks] a new instance of PaginationLinks
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#12
  def initialize(collection, adapter_options); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#24
  def as_json; end

  # Returns the value of attribute collection.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#10
  def collection; end

  # Returns the value of attribute context.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#10
  def context; end

  protected

  # Returns the value of attribute adapter_options.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#36
  def adapter_options; end

  private

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#44
  def first_page_url; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#48
  def last_page_url; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#40
  def location_url; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#64
  def next_page_url; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#88
  def per_page; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#56
  def prev_page_url; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#84
  def query_parameters; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#80
  def request_url; end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#76
  def url(options = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#70
  def url_for_page(number); end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#8
ActiveModelSerializers::Adapter::JsonApi::PaginationLinks::FIRST_PAGE = T.let(T.unsafe(nil), Integer)

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/pagination_links.rb#7
class ActiveModelSerializers::Adapter::JsonApi::PaginationLinks::MissingSerializationContextError < ::KeyError; end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#6
class ActiveModelSerializers::Adapter::JsonApi::Relationship
  # {http://jsonapi.org/format/#document-resource-object-related-resource-links Document Resource Object Related Resource Links}
  # {http://jsonapi.org/format/#document-links Document Links}
  # {http://jsonapi.org/format/#document-resource-object-linkage Document Resource Relationship Linkage}
  # {http://jsonapi.org/format/#document-meta Document Meta}
  #
  # @return [Relationship] a new instance of Relationship
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#11
  def initialize(parent_serializer, serializable_resource_options, association); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#17
  def as_json; end

  protected

  # Returns the value of attribute association.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#34
  def association; end

  # Returns the value of attribute parent_serializer.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#34
  def parent_serializer; end

  # Returns the value of attribute serializable_resource_options.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#34
  def serializable_resource_options; end

  private

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#98
  def belongs_to_id_on_self?(association); end

  # TODO(BF): Avoid db hit on belong_to_ releationship by using foreign_key on self
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#39
  def data_for(association); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#72
  def data_for_many(association); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#47
  def data_for_one(association); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#86
  def links_for(association); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/relationship.rb#93
  def meta_for(association); end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#6
class ActiveModelSerializers::Adapter::JsonApi::ResourceIdentifier
  # {http://jsonapi.org/format/#document-resource-identifier-objects Resource Identifier Objects}
  #
  # @return [ResourceIdentifier] a new instance of ResourceIdentifier
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#38
  def initialize(serializer, options); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#43
  def as_json; end

  protected

  # Returns the value of attribute id.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#53
  def id; end

  # Returns the value of attribute type.
  #
  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#53
  def type; end

  private

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#62
  def id_for(serializer); end

  # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#57
  def type_for(serializer, transform_options); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#12
    def for_type_with_id(type, id, options); end

    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#31
    def inflect_type(type); end

    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#22
    def raw_type_from_serializer_object(object); end

    # source://active_model_serializers//lib/active_model_serializers/adapter/json_api/resource_identifier.rb#7
    def type_for(serializer, serializer_type = T.unsafe(nil), transform_options = T.unsafe(nil)); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/adapter/null.rb#5
class ActiveModelSerializers::Adapter::Null < ::ActiveModelSerializers::Adapter::Base
  # source://active_model_serializers//lib/active_model_serializers/adapter/null.rb#6
  def serializable_hash(*_arg0); end
end

# source://active_model_serializers//lib/active_model_serializers/adapter.rb#5
class ActiveModelSerializers::Adapter::UnknownAdapterError < ::ArgumentError; end

# = ActiveModelSerializers Callbacks
#
# ActiveModelSerializers provides hooks during the life cycle of serialization and
# allow you to trigger logic. Available callbacks are:
#
# * <tt>around_render</tt>
#
# source://active_model_serializers//lib/active_model_serializers/callbacks.rb#15
module ActiveModelSerializers::Callbacks
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModelSerializers::Callbacks::ClassMethods

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# These methods will be included into any ActiveModelSerializers object, adding
# callbacks for +render+.
#
# source://active_model_serializers//lib/active_model_serializers/callbacks.rb#25
module ActiveModelSerializers::Callbacks::ClassMethods
  # Defines a callback that will get called around the render method,
  # whether it is as_json, to_json, or serializable_hash
  #
  #   class ActiveModelSerializers::SerializableResource
  #     include ActiveModelSerializers::Callbacks
  #
  #     around_render do |args, block|
  #       tag_logger do
  #         notify_render do
  #           block.call(args)
  #         end
  #       end
  #     end
  #
  #     def as_json
  #       run_callbacks :render do
  #         adapter.as_json
  #       end
  #     end
  #     # Note: So that we can re-use the instrumenter for as_json, to_json, and
  #     # serializable_hash, we aren't using the usual format, which would be:
  #     # def render(args)
  #     #   adapter.as_json
  #     # end
  #   end
  #
  # source://active_model_serializers//lib/active_model_serializers/callbacks.rb#52
  def around_render(*filters, &blk); end
end

# source://active_model_serializers//lib/active_model_serializers/deprecate.rb#27
module ActiveModelSerializers::Deprecate
  private

  # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#48
  def delegate_and_deprecate(method, delegee); end

  # Simple deprecation method that deprecates +name+ by wrapping it up
  # in a dummy method. It warns on each call to the dummy method
  # telling the user of +replacement+ (unless +replacement+ is :none) that it is planned to go away.
  #
  # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#33
  def deprecate(name, replacement); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#48
    def delegate_and_deprecate(method, delegee); end

    # Simple deprecation method that deprecates +name+ by wrapping it up
    # in a dummy method. It warns on each call to the dummy method
    # telling the user of +replacement+ (unless +replacement+ is :none) that it is planned to go away.
    #
    # source://active_model_serializers//lib/active_model_serializers/deprecate.rb#33
    def deprecate(name, replacement); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/deserialization.rb#4
module ActiveModelSerializers::Deserialization
  private

  # source://active_model_serializers//lib/active_model_serializers/deserialization.rb#7
  def jsonapi_parse(*args); end

  # :nocov:
  #
  # source://active_model_serializers//lib/active_model_serializers/deserialization.rb#12
  def jsonapi_parse!(*args); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/deserialization.rb#7
    def jsonapi_parse(*args); end

    # :nocov:
    #
    # source://active_model_serializers//lib/active_model_serializers/deserialization.rb#12
    def jsonapi_parse!(*args); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/json_pointer.rb#4
module ActiveModelSerializers::JsonPointer
  private

  # source://active_model_serializers//lib/active_model_serializers/json_pointer.rb#12
  def new(pointer_type, value = T.unsafe(nil)); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/json_pointer.rb#12
    def new(pointer_type, value = T.unsafe(nil)); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/json_pointer.rb#7
ActiveModelSerializers::JsonPointer::POINTERS = T.let(T.unsafe(nil), Hash)

# source://active_model_serializers//lib/active_model_serializers/logging.rb#9
module ActiveModelSerializers::Logging
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks
  include ::ActiveModelSerializers::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveModelSerializers::Logging::ClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveModelSerializers::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveModelSerializers::Logging::Macros

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#78
  def notify_render(*_arg0); end

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#85
  def notify_render_payload; end

  private

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/logging.rb#103
  def logger_tagged_by_active_model_serializers?; end

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#94
  def tag_logger(*tags); end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# source://active_model_serializers//lib/active_model_serializers/logging.rb#19
module ActiveModelSerializers::Logging::ClassMethods
  # source://active_model_serializers//lib/active_model_serializers/logging.rb#20
  def instrument_rendering; end
end

# source://active_model_serializers//lib/active_model_serializers/logging.rb#107
class ActiveModelSerializers::Logging::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://active_model_serializers//lib/active_model_serializers/logging.rb#117
  def logger; end

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#108
  def render(event); end
end

# Macros that can be used to customize the logging of class or instance methods,
# by extending the class or its singleton.
#
# Adapted from:
#   https://github.com/rubygems/rubygems/blob/cb28f5e991/lib/rubygems/deprecate.rb
#
# Provides a single method +notify+ to be used to declare when
# something a method notifies, with the argument +callback_name+ of the notification callback.
#
#     class Adapter
#       def self.klass_method
#         # ...
#       end
#
#       def instance_method
#         # ...
#       end
#
#       include ActiveModelSerializers::Logging::Macros
#       notify :instance_method, :render
#
#       class << self
#         extend ActiveModelSerializers::Logging::Macros
#         notify :klass_method, :render
#       end
#     end
#
# source://active_model_serializers//lib/active_model_serializers/logging.rb#57
module ActiveModelSerializers::Logging::Macros
  # Simple notify method that wraps up +name+
  # in a dummy method. It notifies on with the +callback_name+ notifier on
  # each call to the dummy method, telling what the current serializer and adapter
  # are being rendered.
  # Adapted from:
  #   https://github.com/rubygems/rubygems/blob/cb28f5e991/lib/rubygems/deprecate.rb
  #
  # source://active_model_serializers//lib/active_model_serializers/logging.rb#65
  def notify(name, callback_name); end
end

# source://active_model_serializers//lib/active_model_serializers/logging.rb#10
ActiveModelSerializers::Logging::RENDER_EVENT = T.let(T.unsafe(nil), String)

# source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#4
module ActiveModelSerializers::LookupChain
  private

  # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#65
  def namespace_for(klass); end

  # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#69
  def resource_class_name(klass); end

  # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#77
  def serializer_from(klass); end

  # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#73
  def serializer_from_resource_name(name); end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#65
    def namespace_for(klass); end

    # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#69
    def resource_class_name(klass); end

    # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#77
    def serializer_from(klass); end

    # source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#73
    def serializer_from_resource_name(name); end
  end
end

# Uses the controller namespace of the resource to find the serializer
#
# Example:
#  Api::V3::AuthorsController => Api::V3::AuthorSerializer
#
# source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#28
ActiveModelSerializers::LookupChain::BY_NAMESPACE = T.let(T.unsafe(nil), Proc)

# Allows for serializers to be defined in parent serializers
# - useful if a relationship only needs a different set of attributes
#   than if it were rendered independently.
#
# Example:
#   class BlogSerializer < ActiveModel::Serializer
#     class AuthorSerialier < ActiveModel::Serializer
#     ...
#     end
#
#     belongs_to :author
#     ...
#   end
#
#  The belongs_to relationship would be rendered with
#    BlogSerializer::AuthorSerialier
#
# source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#49
ActiveModelSerializers::LookupChain::BY_PARENT_SERIALIZER = T.let(T.unsafe(nil), Proc)

# Standard appending of Serializer to the resource name.
#
# Example:
#   Author => AuthorSerializer
#
# source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#9
ActiveModelSerializers::LookupChain::BY_RESOURCE = T.let(T.unsafe(nil), Proc)

# Uses the namespace of the resource to find the serializer
#
# Example:
#  British::Author => British::AuthorSerializer
#
# source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#17
ActiveModelSerializers::LookupChain::BY_RESOURCE_NAMESPACE = T.let(T.unsafe(nil), Proc)

# source://active_model_serializers//lib/active_model_serializers/lookup_chain.rb#56
ActiveModelSerializers::LookupChain::DEFAULT = T.let(T.unsafe(nil), Array)

# source://active_model_serializers//lib/active_model_serializers/model.rb#8
class ActiveModelSerializers::Model
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::ActiveModel::Access
  include ::ActiveModel::Model
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods

  # @param attributes [Hash]
  # @return [Model] a new instance of Model
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#89
  def initialize(attributes = T.unsafe(nil)); end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#951
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#963
  def _validate_callbacks; end

  # source://activemodel/7.1.5/lib/active_model/validations.rb#71
  def _validators; end

  # source://activemodel/7.1.5/lib/active_model/validations.rb#71
  def _validators?; end

  # The only way to change the attributes of an instance is to directly mutate the attributes.
  #
  # @example
  #
  #   model.attributes[:foo] = :bar
  # @return [Hash]
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#86
  def attributes; end

  # To customize model behavior, this method must be redefined. However,
  # there are other ways of setting the +cache_key+ a serializer uses.
  #
  # @return [String]
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#125
  def cache_key; end

  # Support for validation and other ActiveModel::Errors
  #
  # @return [ActiveModel::Errors]
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#76
  def errors; end

  # Defaults to the downcased model name.
  # This probably isn't a good default, since it's not a unique instance identifier,
  # but that's what is currently implemented \_('-')_/.
  #
  # @note Though +id+ is defined, it will only show up
  #   in +attributes+ when it is passed in to the initializer or added to +attributes+,
  #   such as <tt>attributes[:id] = 5</tt>.
  # @return [String, Numeric, Symbol]
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#104
  def id; end

  # source://activemodel/7.1.5/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.1.5/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activemodel/7.1.5/lib/active_model/naming.rb#255
  def model_name(&block); end

  # source://activemodel/7.1.5/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # When not set, defaults to the time the file was modified.
  #
  # @note Though +updated_at+ and +updated_at=+ are defined, it will only show up
  #   in +attributes+ when it is passed in to the initializer or added to +attributes+,
  #   such as <tt>attributes[:updated_at] = Time.current</tt>.
  # @return [String, Numeric, Time]
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#116
  def updated_at; end

  # Sets the attribute updated_at
  #
  # @param value the value to set the attribute updated_at to.
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#79
  def updated_at=(_arg0); end

  # source://activemodel/7.1.5/lib/active_model/validations.rb#67
  def validation_context; end

  private

  # source://activemodel/7.1.5/lib/active_model/validations.rb#67
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#955
    def _validate_callbacks; end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#959
    def _validate_callbacks=(value); end

    # source://activemodel/7.1.5/lib/active_model/validations.rb#71
    def _validators; end

    # source://activemodel/7.1.5/lib/active_model/validations.rb#71
    def _validators=(value); end

    # source://activemodel/7.1.5/lib/active_model/validations.rb#71
    def _validators?; end

    # source://active_model_serializers//lib/active_model_serializers/model.rb#18
    def attribute_names; end

    # source://active_model_serializers//lib/active_model_serializers/model.rb#18
    def attribute_names=(value); end

    # source://active_model_serializers//lib/active_model_serializers/model.rb#18
    def attribute_names?; end

    # Easily declare instance attributes with setters and getters for each.
    #
    # To initialize an instance, all attributes must have setters.
    # However, the hash returned by +attributes+ instance method will ALWAYS
    # be the value of the initial attributes, regardless of what accessors are defined.
    # The only way to change the change the attributes after initialization is
    # to mutate the +attributes+ directly.
    # Accessor methods do NOT mutate the attributes.  (This is a bug).
    #
    # @note For now, the Model only supports the notion of 'attributes'.
    #   In the tests, there is a special Model that also supports 'associations'. This is
    #   important so that we can add accessors for values that should not appear in the
    #   attributes hash when modeling associations. It is not yet clear if it
    #   makes sense for a PORO to have associations outside of the tests.
    # @overload attributes
    #
    # source://active_model_serializers//lib/active_model_serializers/model.rb#41
    def attributes(*names); end

    # Opt-in to breaking change
    #
    # source://active_model_serializers//lib/active_model_serializers/model.rb#50
    def derive_attributes_from_names_and_fix_accessors; end

    # source://activemodel/7.1.5/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.1.5/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.1.5/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://activemodel/7.1.5/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.1.5/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.1.5/lib/active_model/conversion.rb#32
    def param_delimiter?; end
  end
end

# source://active_model_serializers//lib/active_model_serializers/model.rb#56
module ActiveModelSerializers::Model::DeriveAttributesFromNamesAndFixAccessors
  # Override the +attributes+ method so that the hash is derived from +attribute_names+.
  #
  # The fields in +attribute_names+ determines the returned hash.
  # +attributes+ are returned frozen to prevent any expectations that mutation affects
  # the actual values in the model.
  #
  # source://active_model_serializers//lib/active_model_serializers/model.rb#67
  def attributes; end

  class << self
    # @private
    #
    # source://active_model_serializers//lib/active_model_serializers/model.rb#57
    def included(base); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/railtie.rb#9
class ActiveModelSerializers::Railtie < ::Rails::Railtie; end

# source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#6
class ActiveModelSerializers::SerializableResource
  include ::ActiveModelSerializers::Logging
  include ::ActiveSupport::Callbacks
  include ::ActiveModelSerializers::Callbacks
  extend ::ActiveModelSerializers::Logging::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModelSerializers::Callbacks::ClassMethods
  extend ::ActiveModelSerializers::Logging::Macros

  # Primary interface to composing a resource with a serializer and adapter.
  #
  # @return the serializable_resource, ready for #as_json/#to_json/#serializable_hash.
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#17
  def initialize(resource, options = T.unsafe(nil)); end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#10
  def _notifying_render_as_json(*_arg0, **_arg1, &_arg2); end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#10
  def _notifying_render_serializable_hash(*_arg0, **_arg1, &_arg2); end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#10
  def _notifying_render_to_json(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#963
  def _render_callbacks; end

  # source://activesupport/7.1.5/lib/active_support/callbacks.rb#951
  def _run_render_callbacks(&block); end

  # NOTE: if no adapter is available, returns the resource itself. (i.e. adapter is a no-op)
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#36
  def adapter; end

  # NOTE: if no adapter is available, returns the resource itself. (i.e. adapter is a no-op)
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#36
  def adapter_instance; end

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#69
  def as_json(*args, &block); end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#41
  def find_adapter; end

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#69
  def serializable_hash(*args, &block); end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#27
  def serialization_scope; end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#23
  def serialization_scope=(scope); end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#31
  def serialization_scope_name=(scope_name); end

  # Get serializer either explicitly :serializer or implicitly from resource
  # Remove :serializer key from serializer_opts
  # Remove :each_serializer if present and set as :serializer key
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#56
  def serializer; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#76
  def serializer?; end

  # Get serializer either explicitly :serializer or implicitly from resource
  # Remove :serializer key from serializer_opts
  # Remove :each_serializer if present and set as :serializer key
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#56
  def serializer_class; end

  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#49
  def serializer_instance; end

  # source://active_model_serializers//lib/active_model_serializers/logging.rb#69
  def to_json(*args, &block); end

  # True when no explicit adapter given, or explicit appear is truthy (non-nil)
  # False when explicit adapter is falsy (nil or false)
  #
  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#72
  def use_adapter?; end

  protected

  # Returns the value of attribute adapter_opts.
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#82
  def adapter_opts; end

  # Returns the value of attribute resource.
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#82
  def resource; end

  # Returns the value of attribute serializer_opts.
  #
  # source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#82
  def serializer_opts; end

  class << self
    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#955
    def _render_callbacks; end

    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#959
    def _render_callbacks=(value); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/serializable_resource.rb#7
ActiveModelSerializers::SerializableResource::ADAPTER_OPTION_KEYS = T.let(T.unsafe(nil), Set)

# source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#5
class ActiveModelSerializers::SerializationContext
  # @return [SerializationContext] a new instance of SerializationContext
  #
  # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#28
  def initialize(*args); end

  # Returns the value of attribute key_transform.
  #
  # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#26
  def key_transform; end

  # Returns the value of attribute query_parameters.
  #
  # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#26
  def query_parameters; end

  # Returns the value of attribute request_url.
  #
  # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#26
  def request_url; end

  class << self
    # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#12
    def default_url_options; end

    # Sets the attribute default_url_options
    #
    # @param value the value to set the attribute default_url_options to.
    #
    # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#7
    def default_url_options=(_arg0); end

    # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#8
    def url_helpers; end

    # Sets the attribute url_helpers
    #
    # @param value the value to set the attribute url_helpers to.
    #
    # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#7
    def url_helpers=(_arg0); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#16
module ActiveModelSerializers::SerializationContext::UrlHelpers
  # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#21
  def default_url_options; end

  class << self
    # @private
    #
    # source://active_model_serializers//lib/active_model_serializers/serialization_context.rb#17
    def included(base); end
  end
end

# source://active_model_serializers//lib/active_model_serializers/test.rb#4
module ActiveModelSerializers::Test
  extend ::ActiveSupport::Autoload
end

# source://active_model_serializers//lib/active_model_serializers/test/schema.rb#5
module ActiveModelSerializers::Test::Schema
  # May be renamed
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#25
  def assert_request_response_schema(schema_path = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#19
  def assert_request_schema(schema_path = T.unsafe(nil), message = T.unsafe(nil)); end

  # A Minitest Assertion that test the response is valid against a schema.
  #
  # @example
  #   get :index
  #   assert_response_schema
  # @param schema_path [String] a custom schema path
  # @param message [String] a custom error message
  # @return [Boolean] true when the response is valid
  # @return [Minitest::Assertion] when the response is invalid
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#14
  def assert_response_schema(schema_path = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#30
  def assert_schema(payload, schema_path = T.unsafe(nil), message = T.unsafe(nil)); end
end

# source://active_model_serializers//lib/active_model_serializers/test/schema.rb#132
class ActiveModelSerializers::Test::Schema::AssertRequestSchema < ::ActiveModelSerializers::Test::Schema::AssertSchema
  # @return [AssertRequestSchema] a new instance of AssertRequestSchema
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#133
  def initialize(*_arg0); end
end

# source://active_model_serializers//lib/active_model_serializers/test/schema.rb#126
class ActiveModelSerializers::Test::Schema::AssertResponseSchema < ::ActiveModelSerializers::Test::Schema::AssertSchema
  # @return [AssertResponseSchema] a new instance of AssertResponseSchema
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#127
  def initialize(*_arg0); end
end

# source://active_model_serializers//lib/active_model_serializers/test/schema.rb#38
class ActiveModelSerializers::Test::Schema::AssertSchema
  # Interface may change.
  #
  # @return [AssertSchema] a new instance of AssertSchema
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#42
  def initialize(schema_path, request, response, message, payload = T.unsafe(nil)); end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#53
  def call; end

  # Returns the value of attribute message.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#39
  def message; end

  # Returns the value of attribute payload.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#39
  def payload; end

  # Returns the value of attribute request.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#39
  def request; end

  # Returns the value of attribute response.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#39
  def response; end

  # Returns the value of attribute schema_path.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#39
  def schema_path; end

  protected

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#68
  def action; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#100
  def add_schema_to_document_store; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#64
  def controller_path; end

  # Returns the value of attribute document_store.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#62
  def document_store; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#96
  def json_schema; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#108
  def load_json(json); end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#114
  def load_json_file(path); end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#92
  def request_params; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#120
  def require_json_schema!; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#88
  def response_body; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#84
  def schema_data; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#72
  def schema_directory; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#76
  def schema_full_path; end

  # source://active_model_serializers//lib/active_model_serializers/test/schema.rb#80
  def schema_path_default; end
end

# source://active_model_serializers//lib/active_model_serializers/test/schema.rb#36
class ActiveModelSerializers::Test::Schema::InvalidSchemaError < ::Minitest::Assertion; end

# source://active_model_serializers//lib/active_model_serializers/test/schema.rb#35
class ActiveModelSerializers::Test::Schema::MissingSchema < ::Minitest::Assertion; end

# source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#6
module ActiveModelSerializers::Test::Serializer
  extend ::ActiveSupport::Concern

  # Asserts that the request was rendered with the appropriate serializers.
  #
  #  # assert that the "PostSerializer" serializer was rendered
  #  assert_serializer "PostSerializer"
  #
  #  # return a custom error message
  #  assert_serializer "PostSerializer", "PostSerializer not rendered"
  #
  #  # assert that the instance of PostSerializer was rendered
  #  assert_serializer PostSerializer
  #
  #  # assert that the "PostSerializer" serializer was rendered
  #  assert_serializer :post_serializer
  #
  #  # assert that the rendered serializer starts with "Post"
  #  assert_serializer %r{\APost.+\Z}
  #
  #  # assert that no serializer was rendered
  #  assert_serializer nil
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#34
  def assert_serializer(expectation, message = T.unsafe(nil)); end

  private

  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#117
  def setup_serialization_subscriptions; end

  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#122
  def teardown_serialization_subscriptions; end
end

# source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#41
class ActiveModelSerializers::Test::Serializer::AssertSerializer
  # @return [AssertSerializer] a new instance of AssertSerializer
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#45
  def initialize; end

  # Returns the value of attribute expectation.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#43
  def expectation; end

  # Sets the attribute expectation
  #
  # @param value the value to set the attribute expectation to.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#43
  def expectation=(_arg0); end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#54
  def matches?; end

  # Returns the value of attribute message.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#42
  def message; end

  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#50
  def message=(message); end

  # Returns the value of attribute response.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#43
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#43
  def response=(_arg0); end

  # Returns the value of attribute serializers.
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#42
  def serializers; end

  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#68
  def subscribe; end

  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#75
  def unsubscribe; end

  private

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#106
  def a_serializer?; end

  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#110
  def event_name; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#83
  def matches_class?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#102
  def matches_nil?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#96
  def matches_regexp?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#92
  def matches_string?; end

  # @return [Boolean]
  #
  # source://active_model_serializers//lib/active_model_serializers/test/serializer.rb#87
  def matches_symbol?; end
end
