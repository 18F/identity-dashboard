# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `wicked` gem.
# Please instead update this file by running `bin/tapioca gem wicked`.


# source://wicked//lib/wicked.rb#5
module Wicked; end

# source://wicked//lib/wicked.rb#10
module Wicked::Controller; end

# source://wicked//lib/wicked.rb#11
module Wicked::Controller::Concerns; end

# source://wicked//lib/wicked/controller/concerns/action.rb#1
module Wicked::Controller::Concerns::Action
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Wicked::Controller::Concerns::Action::ClassMethods
end

# source://wicked//lib/wicked/controller/concerns/action.rb#4
module Wicked::Controller::Concerns::Action::ClassMethods
  # source://wicked//lib/wicked/controller/concerns/action.rb#7
  def before_action(*names, &blk); end

  # source://wicked//lib/wicked/controller/concerns/action.rb#7
  def prepend_before_action(*names, &blk); end

  # source://wicked//lib/wicked/controller/concerns/action.rb#7
  def skip_before_action(*names, &blk); end

  class << self
    # @private
    #
    # source://wicked//lib/wicked/controller/concerns/action.rb#5
    def extended(base); end
  end
end

# source://wicked//lib/wicked/controller/concerns/path.rb#1
module Wicked::Controller::Concerns::Path
  extend ::ActiveSupport::Concern

  # source://wicked//lib/wicked/controller/concerns/path.rb#4
  def next_wizard_path(options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/path.rb#8
  def next_wizard_url(options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/path.rb#12
  def previous_wizard_path(options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/path.rb#16
  def previous_wizard_url(options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/path.rb#24
  def wicked_action; end

  # source://wicked//lib/wicked/controller/concerns/path.rb#20
  def wicked_controller; end

  # source://wicked//lib/wicked/controller/concerns/path.rb#28
  def wizard_path(goto_step = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/path.rb#38
  def wizard_url(goto_step = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://wicked//lib/wicked/controller/concerns/render_redirect.rb#1
module Wicked::Controller::Concerns::RenderRedirect
  extend ::ActiveSupport::Concern

  # TODO redirect to resource if one is passed to render_wizard
  #
  # source://wicked//lib/wicked/controller/concerns/render_redirect.rb#50
  def finish_wizard_path(params = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/render_redirect.rb#15
  def process_resource!(resource, options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/render_redirect.rb#56
  def redirect_to_finish_wizard(options = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/render_redirect.rb#41
  def redirect_to_next(next_step, options = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/render_redirect.rb#33
  def render_step(the_step, options = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/render_redirect.rb#4
  def render_wizard(resource = T.unsafe(nil), options = T.unsafe(nil), params = T.unsafe(nil)); end
end

# source://wicked//lib/wicked/controller/concerns/steps.rb#1
module Wicked::Controller::Concerns::Steps
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Wicked::Controller::Concerns::Steps::ClassMethods

  # will return true if step passed in is the currently rendered step
  #
  # @return [Boolean]
  #
  # source://wicked//lib/wicked/controller/concerns/steps.rb#21
  def current_step?(step_name); end

  # will return true if the step passed in has not been executed by the wizard
  #
  # @return [Boolean]
  #
  # source://wicked//lib/wicked/controller/concerns/steps.rb#33
  def future_step?(step_name); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#6
  def jump_to(goto_step, options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#86
  def next_step(current_step = T.unsafe(nil)); end

  # will return true if the next step is the step passed in
  #
  # @return [Boolean]
  #
  # source://wicked//lib/wicked/controller/concerns/steps.rb#45
  def next_step?(step_name); end

  # will return true if the step passed in has already been executed by the wizard
  #
  # @return [Boolean]
  #
  # source://wicked//lib/wicked/controller/concerns/steps.rb#27
  def past_step?(step_name); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#79
  def previous_step(current_step = T.unsafe(nil)); end

  # will return true if the last step is the step passed in
  #
  # @return [Boolean]
  #
  # source://wicked//lib/wicked/controller/concerns/steps.rb#39
  def previous_step?(step_name); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#11
  def skip_step(options = T.unsafe(nil)); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#16
  def step; end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#73
  def steps; end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#69
  def steps=(wizard_steps); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#73
  def steps_list; end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#73
  def wizard_steps; end

  private

  # @return [Boolean]
  #
  # source://wicked//lib/wicked/controller/concerns/steps.rb#101
  def current_and_given_step_exists?(step_name); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#97
  def current_step_index; end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#93
  def step_index_for(step_name); end
end

# source://wicked//lib/wicked/controller/concerns/steps.rb#50
module Wicked::Controller::Concerns::Steps::ClassMethods
  # source://wicked//lib/wicked/controller/concerns/steps.rb#60
  def check_protected!(wizard_steps); end

  # source://wicked//lib/wicked/controller/concerns/steps.rb#51
  def steps(*args); end
end

# source://wicked//lib/wicked/controller/concerns/steps.rb#2
Wicked::Controller::Concerns::Steps::PROTECTED_STEPS = T.let(T.unsafe(nil), Array)

# source://wicked//lib/wicked/engine.rb#2
class Wicked::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.5/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://wicked//lib/wicked.rb#6
Wicked::FINISH_STEP = T.let(T.unsafe(nil), String)

# source://wicked//lib/wicked.rb#7
Wicked::FIRST_STEP = T.let(T.unsafe(nil), String)

# source://wicked//lib/wicked.rb#8
Wicked::LAST_STEP = T.let(T.unsafe(nil), String)

# source://wicked//lib/wicked.rb#14
module Wicked::Wizard
  extend ::ActiveSupport::Concern
  include ::Wicked::Controller::Concerns::Path
  include ::Wicked::Controller::Concerns::RenderRedirect
  include ::Wicked::Controller::Concerns::Steps
  include ::Wicked::Controller::Concerns::Action

  mixes_in_class_methods ::Wicked::Controller::Concerns::Steps::ClassMethods
  mixes_in_class_methods ::Wicked::Controller::Concerns::Action::ClassMethods

  # forward to first step with whatever params are provided
  #
  # source://wicked//lib/wicked/wizard.rb#38
  def index; end

  # returns the canonical value for a step name, needed for translation support
  #
  # source://wicked//lib/wicked/wizard.rb#43
  def wizard_value(step_name); end

  private

  # source://wicked//lib/wicked/wizard.rb#52
  def check_redirect_to_first_last!(step); end

  # @raise [UndefinedStepsError]
  #
  # source://wicked//lib/wicked/wizard.rb#70
  def check_steps!; end

  # source://wicked//lib/wicked/wizard.rb#47
  def initialize_wicked_variables; end

  # source://wicked//lib/wicked/wizard.rb#74
  def set_previous_next(step); end

  # @raise [InvalidStepError]
  #
  # source://wicked//lib/wicked/wizard.rb#57
  def setup_step_from(the_step); end

  # source://wicked//lib/wicked/wizard.rb#79
  def setup_wizard; end
end

# source://wicked//lib/wicked/wizard.rb#5
class Wicked::Wizard::InvalidStepError < ::RuntimeError
  # @return [InvalidStepError] a new instance of InvalidStepError
  #
  # source://wicked//lib/wicked/wizard.rb#8
  def initialize(step = T.unsafe(nil)); end

  # Returns the value of attribute step.
  #
  # source://wicked//lib/wicked/wizard.rb#6
  def step; end

  # Sets the attribute step
  #
  # @param value the value to set the attribute step to.
  #
  # source://wicked//lib/wicked/wizard.rb#6
  def step=(_arg0); end
end

# source://wicked//lib/wicked/wizard/translated.rb#3
module Wicked::Wizard::Translated
  extend ::ActiveSupport::Concern
  include ::Wicked::Controller::Concerns::Path
  include ::Wicked::Controller::Concerns::RenderRedirect
  include ::Wicked::Controller::Concerns::Steps
  include ::Wicked::Controller::Concerns::Action
  include ::Wicked::Wizard

  mixes_in_class_methods ::Wicked::Controller::Concerns::Steps::ClassMethods
  mixes_in_class_methods ::Wicked::Controller::Concerns::Action::ClassMethods

  # takes a canonical wizard value and translates to correct language
  #
  # es.yml
  # wicked:
  #   first: "uno"
  #
  #   wizard_translate("first") # => :uno
  #
  # source://wicked//lib/wicked/wizard/translated.rb#43
  def wizard_translate(step_name); end

  # creates a hash where keys are translated steps, values are the name of the view file
  #
  #  es:
  #    hello: "hola mundo"
  #    wicked:
  #      first: "uno"
  #      second: "dos"
  #
  #   steps :first, :second
  #
  # {:uno   => :first, :dos    => :second} # spanish
  # {:first => :first, :second => :second} # english
  #
  # source://wicked//lib/wicked/wizard/translated.rb#27
  def wizard_translations; end

  # takes an already translated value and converts to a canonical wizard value
  #
  # es.yml
  # wicked:
  #   first: "uno"
  #
  #   wizard_value("uno") # => :first
  #
  # source://wicked//lib/wicked/wizard/translated.rb#55
  def wizard_value(step_name); end

  private

  # sets up a translated wizard controller
  # translations are expected under the 'wicked' namespace
  #
  #  es:
  #    hello: "hola mundo"
  #    wicked:
  #      first: "uno"
  #      second: "dos"
  #
  # translation keys can be provided to `steps` with or without the 'wicked' key:
  #
  #     steps :first, :second
  # or
  #
  #     steps "wicked.first", "wicked.second"
  #
  # source://wicked//lib/wicked/wizard/translated.rb#76
  def setup_wizard_translated; end
end

# source://wicked//lib/wicked/wizard.rb#15
class Wicked::Wizard::UndefinedStepsError < ::RuntimeError
  # @return [UndefinedStepsError] a new instance of UndefinedStepsError
  #
  # source://wicked//lib/wicked/wizard.rb#16
  def initialize; end
end

# source://wicked//lib/wicked.rb#19
class WickedError < ::StandardError; end

# source://wicked//lib/wicked.rb#20
class WickedProtectedStepError < ::WickedError; end
