# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `aes_key_wrap` gem.
# Please instead update this file by running `bin/tapioca gem aes_key_wrap`.


# A Ruby implementation of AES Key Wrap, a.k.a RFC 3394, a.k.a NIST Key Wrapping
#
# source://aes_key_wrap//lib/aes_key_wrap.rb#6
module AESKeyWrap
  class << self
    # Unwraps an encrypted key using a key-encrypting key (KEK)
    #
    # This is an implementation of the "index based" algorithm
    # specified in section 2.2.2 of RFC 3394:
    # http://www.ietf.org/rfc/rfc3394.txt
    #
    # @param wrapped_key [String] The wrapped key (cyphertext), as a binary string
    # @param kek [String] The key-encrypting key, as a binary string
    # @param expected_iv [Integer, String] The IV used to wrap the key, as either
    #   an unsigned 64-bit integer (e.g. `0xDEADBEEFC0FFEEEE`) or an 8-byte
    #   string (e.g. `"\xDE\xAD\xBE\xEF\xC0\xFF\xEE\xEE"`).
    # @return [String] The unwrapped (plaintext) key as a binary string, or
    #   `nil` if unwrapping failed due to `expected_iv` not matching the
    #   decrypted IV
    # @see #unwrap!
    #
    # source://aes_key_wrap//lib/aes_key_wrap.rb#77
    def unwrap(wrapped_key, kek, expected_iv = T.unsafe(nil)); end

    # Exception-throwing version of #unwrap
    #
    # @see #unwrap
    #
    # source://aes_key_wrap//lib/aes_key_wrap.rb#116
    def unwrap!(*args); end

    # Wraps a key using a key-encrypting key (KEK)
    #
    # This is an implementation of the "index based" algorithm
    # specified in section 2.2.1 of RFC 3394:
    # http://www.ietf.org/rfc/rfc3394.txt
    #
    # @param unwrapped_key [String] The plaintext key to be wrapped, as a binary string
    # @param kek [String] The key-encrypting key, as a binary_string
    # @param iv [Integer, String] The "initial value", as either an unsigned
    #   64-bit integer (e.g. `0xDEADBEEFC0FFEEEE`) or an 8-byte string (e.g.
    #   `"\xDE\xAD\xBE\xEF\xC0\xFF\xEE\xEE"`).
    # @return [String] The wrapped key, as a binary string
    #
    # source://aes_key_wrap//lib/aes_key_wrap.rb#28
    def wrap(unwrapped_key, kek, iv = T.unsafe(nil)); end

    private

    # source://aes_key_wrap//lib/aes_key_wrap.rb#124
    def aes(encrypt_or_decrypt, key, data); end

    # source://aes_key_wrap//lib/aes_key_wrap.rb#133
    def coerce_uint64(value); end
  end
end

# source://aes_key_wrap//lib/aes_key_wrap.rb#7
AESKeyWrap::DEFAULT_IV = T.let(T.unsafe(nil), Integer)

# bytes
#
# source://aes_key_wrap//lib/aes_key_wrap.rb#8
AESKeyWrap::IV_SIZE = T.let(T.unsafe(nil), Integer)

# source://aes_key_wrap//lib/aes_key_wrap.rb#10
class AESKeyWrap::UnwrapFailedError < ::StandardError; end
