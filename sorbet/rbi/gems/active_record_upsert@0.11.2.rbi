# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_record_upsert` gem.
# Please instead update this file by running `bin/tapioca gem active_record_upsert`.


# source://active_record_upsert//lib/active_record_upsert/active_record.rb#8
module ActiveRecord
  class << self
    # source://activerecord/7.1.5/lib/active_record.rb#342
    def action_on_strict_loading_violation; end

    # source://activerecord/7.1.5/lib/active_record.rb#342
    def action_on_strict_loading_violation=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#422
    def allow_deprecated_singular_associations_name; end

    # source://activerecord/7.1.5/lib/active_record.rb#422
    def allow_deprecated_singular_associations_name=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#335
    def application_record_class; end

    # source://activerecord/7.1.5/lib/active_record.rb#335
    def application_record_class=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#263
    def async_query_executor; end

    # source://activerecord/7.1.5/lib/active_record.rb#263
    def async_query_executor=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#317
    def before_committed_on_all_records; end

    # source://activerecord/7.1.5/lib/active_record.rb#317
    def before_committed_on_all_records=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#314
    def belongs_to_required_validates_foreign_key; end

    # source://activerecord/7.1.5/lib/active_record.rb#314
    def belongs_to_required_validates_foreign_key=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#323
    def commit_transaction_on_non_local_return; end

    # source://activerecord/7.1.5/lib/active_record.rb#323
    def commit_transaction_on_non_local_return=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#209
    def db_warnings_action; end

    # source://activerecord/7.1.5/lib/active_record.rb#211
    def db_warnings_action=(action); end

    # source://activerecord/7.1.5/lib/active_record.rb#236
    def db_warnings_ignore; end

    # source://activerecord/7.1.5/lib/active_record.rb#236
    def db_warnings_ignore=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#192
    def default_timezone; end

    # source://activerecord/7.1.5/lib/active_record.rb#196
    def default_timezone=(default_timezone); end

    # source://activerecord/7.1.5/lib/active_record/deprecator.rb#4
    def deprecator; end

    # source://activerecord/7.1.5/lib/active_record.rb#177
    def disable_prepared_statements; end

    # source://activerecord/7.1.5/lib/active_record.rb#177
    def disable_prepared_statements=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#476
    def disconnect_all!; end

    # source://activerecord/7.1.5/lib/active_record.rb#382
    def dump_schema_after_migration; end

    # source://activerecord/7.1.5/lib/active_record.rb#382
    def dump_schema_after_migration=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#392
    def dump_schemas; end

    # source://activerecord/7.1.5/lib/active_record.rb#392
    def dump_schemas=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#465
    def eager_load!; end

    # source://activerecord/7.1.5/lib/active_record.rb#361
    def error_on_ignored_order; end

    # source://activerecord/7.1.5/lib/active_record.rb#361
    def error_on_ignored_order=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record/gem_version.rb#5
    def gem_version; end

    # source://activerecord/7.1.5/lib/active_record.rb#454
    def generate_secure_token_on; end

    # source://activerecord/7.1.5/lib/active_record.rb#454
    def generate_secure_token_on=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#286
    def global_executor_concurrency; end

    # source://activerecord/7.1.5/lib/active_record.rb#278
    def global_executor_concurrency=(global_executor_concurrency); end

    # source://activerecord/7.1.5/lib/active_record.rb#266
    def global_thread_pool_async_query_executor; end

    # source://activerecord/7.1.5/lib/active_record.rb#290
    def index_nested_attribute_errors; end

    # source://activerecord/7.1.5/lib/active_record.rb#290
    def index_nested_attribute_errors=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#183
    def lazily_load_schema_cache; end

    # source://activerecord/7.1.5/lib/active_record.rb#183
    def lazily_load_schema_cache=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#245
    def legacy_connection_handling=(_); end

    # source://activerecord/7.1.5/lib/active_record.rb#308
    def maintain_test_schema; end

    # source://activerecord/7.1.5/lib/active_record.rb#308
    def maintain_test_schema=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#457
    def marshalling_format_version; end

    # source://activerecord/7.1.5/lib/active_record.rb#461
    def marshalling_format_version=(value); end

    # source://activerecord/7.1.5/lib/active_record.rb#373
    def migration_strategy; end

    # source://activerecord/7.1.5/lib/active_record.rb#373
    def migration_strategy=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#425
    def query_transformers; end

    # source://activerecord/7.1.5/lib/active_record.rb#425
    def query_transformers=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#305
    def queues; end

    # source://activerecord/7.1.5/lib/active_record.rb#305
    def queues=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#440
    def raise_int_wider_than_64bit; end

    # source://activerecord/7.1.5/lib/active_record.rb#440
    def raise_int_wider_than_64bit=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#311
    def raise_on_assign_to_attr_readonly; end

    # source://activerecord/7.1.5/lib/active_record.rb#311
    def raise_on_assign_to_attr_readonly=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#242
    def reading_role; end

    # source://activerecord/7.1.5/lib/active_record.rb#242
    def reading_role=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#320
    def run_after_transaction_callbacks_in_order_defined; end

    # source://activerecord/7.1.5/lib/active_record.rb#320
    def run_after_transaction_callbacks_in_order_defined=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#189
    def schema_cache_ignored_tables; end

    # source://activerecord/7.1.5/lib/active_record.rb#189
    def schema_cache_ignored_tables=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#353
    def schema_format; end

    # source://activerecord/7.1.5/lib/active_record.rb#353
    def schema_format=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#395
    def suppress_multiple_database_warning; end

    # source://activerecord/7.1.5/lib/active_record.rb#402
    def suppress_multiple_database_warning=(value); end

    # source://activerecord/7.1.5/lib/active_record.rb#367
    def timestamped_migrations; end

    # source://activerecord/7.1.5/lib/active_record.rb#367
    def timestamped_migrations=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#432
    def use_yaml_unsafe_load; end

    # source://activerecord/7.1.5/lib/active_record.rb#432
    def use_yaml_unsafe_load=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#298
    def verbose_query_logs; end

    # source://activerecord/7.1.5/lib/active_record.rb#298
    def verbose_query_logs=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#415
    def verify_foreign_keys_for_fixtures; end

    # source://activerecord/7.1.5/lib/active_record.rb#415
    def verify_foreign_keys_for_fixtures=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record/version.rb#7
    def version; end

    # source://activerecord/7.1.5/lib/active_record.rb#332
    def warn_on_records_fetched_greater_than; end

    # source://activerecord/7.1.5/lib/active_record.rb#332
    def warn_on_records_fetched_greater_than=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#239
    def writing_role; end

    # source://activerecord/7.1.5/lib/active_record.rb#239
    def writing_role=(_arg0); end

    # source://activerecord/7.1.5/lib/active_record.rb#447
    def yaml_column_permitted_classes; end

    # source://activerecord/7.1.5/lib/active_record.rb#447
    def yaml_column_permitted_classes=(_arg0); end
  end
end

class ActiveRecord::Base
  include ::ActiveRecordUpsert::ActiveRecord::PersistenceExtensions
  include ::ActiveRecordUpsert::ActiveRecord::TimestampExtensions
  include ::ActiveRecordUpsert::ActiveRecord::TransactionsExtensions
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::ActiveRecordUpsert::ActiveRecord::PersistenceExtensions::ClassMethods
end

class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter < ::ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecordUpsert::ActiveRecord::ConnectAdapterExtension
  include ::ActiveRecordUpsert::ActiveRecord::ConnectionAdapters::Abstract::DatabaseStatementsExtensions
  include ::ActiveRecordUpsert::ActiveRecord::ConnectionAdapters::Postgresql::DatabaseStatementsExtensions
end

# source://active_record_upsert//lib/active_record_upsert/active_record.rb#9
class ActiveRecord::RecordSavedError < ::ActiveRecord::ActiveRecordError; end

# source://active_record_upsert//lib/active_record_upsert/version.rb#1
module ActiveRecordUpsert; end

# source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/abstract/database_statements.rb#2
module ActiveRecordUpsert::ActiveRecord; end

# source://active_record_upsert//lib/active_record_upsert/compatibility/rails70.rb#50
module ActiveRecordUpsert::ActiveRecord::ConnectAdapterExtension
  # source://active_record_upsert//lib/active_record_upsert/compatibility/rails70.rb#51
  def upsert(*args, **kwargs); end
end

# source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/abstract/database_statements.rb#3
module ActiveRecordUpsert::ActiveRecord::ConnectionAdapters; end

# source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/abstract/database_statements.rb#4
module ActiveRecordUpsert::ActiveRecord::ConnectionAdapters::Abstract; end

# source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/abstract/database_statements.rb#5
module ActiveRecordUpsert::ActiveRecord::ConnectionAdapters::Abstract::DatabaseStatementsExtensions
  # @raise [NotImplementedError]
  #
  # source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/abstract/database_statements.rb#6
  def exec_upsert(_sql, _name, _binds, _pk); end
end

# source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/postgresql/database_statements.rb#4
module ActiveRecordUpsert::ActiveRecord::ConnectionAdapters::Postgresql; end

# source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/postgresql/database_statements.rb#5
module ActiveRecordUpsert::ActiveRecord::ConnectionAdapters::Postgresql::DatabaseStatementsExtensions
  # source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/postgresql/database_statements.rb#11
  def exec_upsert(sql, name, binds); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/connection_adapters/postgresql/database_statements.rb#6
  def upsert(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
end

# source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#3
module ActiveRecordUpsert::ActiveRecord::PersistenceExtensions
  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#27
  def _upsert_record(upsert_attribute_names = T.unsafe(nil), arel_condition = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#21
  def upsert(**kwargs); end

  # @raise [::ActiveRecord::ReadOnlyRecord]
  #
  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#4
  def upsert!(attributes: T.unsafe(nil), arel_condition: T.unsafe(nil), validate: T.unsafe(nil), opts: T.unsafe(nil)); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#37
  def upsert_operation; end
end

# source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#43
module ActiveRecordUpsert::ActiveRecord::PersistenceExtensions::ClassMethods
  # source://active_record_upsert//lib/active_record_upsert/compatibility/rails70.rb#5
  def __substitute_values(values, table); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#86
  def _prepare_column(column); end

  # source://active_record_upsert//lib/active_record_upsert/compatibility/rails70.rb#16
  def _upsert_record(existing_attributes, upsert_attributes_names, wheres, opts); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#109
  def inherited(subclass); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#54
  def upsert(attributes, **kwargs, &block); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#44
  def upsert!(attributes, arel_condition: T.unsafe(nil), validate: T.unsafe(nil), opts: T.unsafe(nil), &block); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#96
  def upsert_keys(*keys); end

  # source://active_record_upsert//lib/active_record_upsert/active_record/persistence.rb#105
  def upsert_options; end
end

# source://active_record_upsert//lib/active_record_upsert/active_record/timestamp.rb#3
module ActiveRecordUpsert::ActiveRecord::TimestampExtensions
  # source://active_record_upsert//lib/active_record_upsert/active_record/timestamp.rb#4
  def _upsert_record(*args); end
end

# source://active_record_upsert//lib/active_record_upsert/active_record/transactions.rb#3
module ActiveRecordUpsert::ActiveRecord::TransactionsExtensions
  # source://active_record_upsert//lib/active_record_upsert/compatibility/rails70.rb#45
  def upsert(*args, **kwargs); end
end

# source://active_record_upsert//lib/active_record_upsert/arel/insert_manager.rb#2
module ActiveRecordUpsert::Arel; end

# source://active_record_upsert//lib/active_record_upsert/arel/insert_manager.rb#3
module ActiveRecordUpsert::Arel::InsertManagerExtensions
  # source://active_record_upsert//lib/active_record_upsert/arel/insert_manager.rb#8
  def do_nothing_on_conflict(target); end

  # source://active_record_upsert//lib/active_record_upsert/arel/insert_manager.rb#4
  def on_conflict=(node); end
end

# source://active_record_upsert//lib/active_record_upsert/arel/table_extensions.rb#3
module ActiveRecordUpsert::Arel::TableExtensions
  # source://active_record_upsert//lib/active_record_upsert/arel/table_extensions.rb#4
  def compile_upsert(upsert_keys, upsert_options, upsert_values, insert_values, wheres); end
end

# source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#3
module ActiveRecordUpsert::Arel::Visitors; end

# source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#4
module ActiveRecordUpsert::Arel::Visitors::ToSqlExtensions
  # @return [Boolean]
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#47
  def table_exists?(name); end

  # source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#21
  def visit_Arel_Nodes_DoNothing(_o, collector); end

  # source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#25
  def visit_Arel_Nodes_DoUpdateSet(o, collector); end

  # source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#42
  def visit_Arel_Nodes_ExcludedColumn(o, collector); end

  # source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#5
  def visit_Arel_Nodes_InsertStatement(o, collector); end

  # source://active_record_upsert//lib/active_record_upsert/arel/visitors/to_sql.rb#14
  def visit_Arel_Nodes_OnConflict(o, collector); end
end

# source://active_record_upsert//lib/active_record_upsert/version.rb#2
ActiveRecordUpsert::VERSION = T.let(T.unsafe(nil), String)

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict_action.rb#1
module Arel
  class << self
    # source://activerecord/7.1.5/lib/arel.rb#60
    def arel_node?(value); end

    # source://activerecord/7.1.5/lib/arel.rb#64
    def fetch_attribute(value, &block); end

    # source://activerecord/7.1.5/lib/arel.rb#48
    def sql(sql_string, *positional_binds, **named_binds); end

    # source://activerecord/7.1.5/lib/arel.rb#56
    def star; end
  end
end

class Arel::InsertManager < ::Arel::TreeManager
  include ::ActiveRecordUpsert::Arel::InsertManagerExtensions
end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict_action.rb#2
module Arel::Nodes
  class << self
    # source://activerecord/7.1.5/lib/arel/nodes/casted.rb#48
    def build_quoted(other, attribute = T.unsafe(nil)); end
  end
end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_nothing.rb#3
class Arel::Nodes::DoNothing < ::Arel::Nodes::OnConflictAction; end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#3
class Arel::Nodes::DoUpdateSet < ::Arel::Nodes::OnConflictAction
  # @return [DoUpdateSet] a new instance of DoUpdateSet
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#7
  def initialize; end

  # @return [Boolean]
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#23
  def ==(other); end

  # @return [Boolean]
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#23
  def eql?(other); end

  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#19
  def hash; end

  # Returns the value of attribute key.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#5
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#5
  def key=(_arg0); end

  # Returns the value of attribute values.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#4
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#4
  def values=(_arg0); end

  # Returns the value of attribute wheres.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#4
  def wheres; end

  # Sets the attribute wheres
  #
  # @param value the value to set the attribute wheres to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#4
  def wheres=(_arg0); end

  private

  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/do_update_set.rb#13
  def initialize_copy(other); end
end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/excluded_column.rb#3
class Arel::Nodes::ExcludedColumn < ::Arel::Nodes::Node
  # @return [ExcludedColumn] a new instance of ExcludedColumn
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/excluded_column.rb#5
  def initialize(column); end

  # Returns the value of attribute column.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/excluded_column.rb#4
  def column; end
end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/insert_statement.rb#3
class Arel::Nodes::InsertStatement < ::Arel::Nodes::Node
  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#8
  def initialize(relation = T.unsafe(nil)); end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#27
  def ==(other); end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def columns; end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def columns=(_arg0); end

  # @return [Boolean]
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/insert_statement.rb#10
  def eql?(other); end

  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/insert_statement.rb#6
  def hash; end

  # Returns the value of attribute on_conflict.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/insert_statement.rb#4
  def on_conflict; end

  # Sets the attribute on_conflict
  #
  # @param value the value to set the attribute on_conflict to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/insert_statement.rb#4
  def on_conflict=(_arg0); end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def relation; end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def relation=(_arg0); end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def select; end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def select=(_arg0); end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def values; end

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#6
  def values=(_arg0); end

  private

  # source://activerecord/7.1.5/lib/arel/nodes/insert_statement.rb#16
  def initialize_copy(other); end
end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#3
class Arel::Nodes::OnConflict < ::Arel::Nodes::Node
  # @return [OnConflict] a new instance of OnConflict
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#6
  def initialize; end

  # Returns the value of attribute action.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#4
  def action; end

  # Sets the attribute action
  #
  # @param value the value to set the attribute action to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#4
  def action=(_arg0); end

  # @return [Boolean]
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#17
  def eql?(other); end

  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#13
  def hash; end

  # Returns the value of attribute target.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#4
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#4
  def target=(_arg0); end

  # Returns the value of attribute where.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#4
  def where; end

  # Sets the attribute where
  #
  # @param value the value to set the attribute where to.
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict.rb#4
  def where=(_arg0); end
end

# source://active_record_upsert//lib/active_record_upsert/arel/nodes/on_conflict_action.rb#3
class Arel::Nodes::OnConflictAction < ::Arel::Nodes::Node; end

# source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#2
class Arel::OnConflictDoUpdateManager < ::Arel::TreeManager
  # @return [OnConflictDoUpdateManager] a new instance of OnConflictDoUpdateManager
  #
  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#3
  def initialize; end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#37
  def set(values); end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#19
  def target(column); end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#15
  def target=(column); end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#11
  def target_condition=(where); end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#33
  def to_node; end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#28
  def where(expr); end

  # source://active_record_upsert//lib/active_record_upsert/arel/on_conflict_do_update_manager.rb#24
  def wheres=(exprs); end
end

class Arel::Table
  include ::ActiveRecordUpsert::Arel::TableExtensions
end

module Arel::Visitors; end

class Arel::Visitors::ToSql < ::Arel::Visitors::Visitor
  include ::ActiveRecordUpsert::Arel::Visitors::ToSqlExtensions
end
