# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `useragent` gem.
# Please instead update this file by running `bin/tapioca gem useragent`.


# source://useragent//lib/user_agent/comparable.rb#1
class UserAgent
  include ::UserAgent::Comparable

  # @return [UserAgent] a new instance of UserAgent
  #
  # source://useragent//lib/user_agent.rb#32
  def initialize(product, version = T.unsafe(nil), comment = T.unsafe(nil)); end

  # Any comparison between two user agents with different products will
  # always return false.
  #
  # source://useragent//lib/user_agent.rb#60
  def <=>(other); end

  # Returns the value of attribute comment.
  #
  # source://useragent//lib/user_agent.rb#30
  def comment; end

  # source://useragent//lib/user_agent.rb#54
  def detect_comment(&block); end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent.rb#68
  def eql?(other); end

  # Returns the value of attribute product.
  #
  # source://useragent//lib/user_agent.rb#30
  def product; end

  # source://useragent//lib/user_agent.rb#74
  def to_s; end

  # source://useragent//lib/user_agent.rb#78
  def to_str; end

  # Returns the value of attribute version.
  #
  # source://useragent//lib/user_agent.rb#30
  def version; end

  class << self
    # source://useragent//lib/user_agent.rb#17
    def parse(string); end
  end
end

# source://useragent//lib/user_agent/browsers/base.rb#2
module UserAgent::Browsers
  class << self
    # source://useragent//lib/user_agent/browsers.rb#42
    def all; end

    # source://useragent//lib/user_agent/browsers.rb#46
    def extend(array); end
  end
end

# source://useragent//lib/user_agent/browsers.rb#25
UserAgent::Browsers::ALL = T.let(T.unsafe(nil), Array)

# CoreMedia is a framework on iOS and is used by various iOS apps to playback media.
#
# source://useragent//lib/user_agent/browsers/apple_core_media.rb#4
class UserAgent::Browsers::AppleCoreMedia < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/apple_core_media.rb#13
  def application; end

  # source://useragent//lib/user_agent/browsers/apple_core_media.rb#9
  def browser; end

  # source://useragent//lib/user_agent/browsers/apple_core_media.rb#45
  def localization; end

  # source://useragent//lib/user_agent/browsers/apple_core_media.rb#31
  def os; end

  # source://useragent//lib/user_agent/browsers/apple_core_media.rb#17
  def platform; end

  # source://useragent//lib/user_agent/browsers/apple_core_media.rb#27
  def security; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/apple_core_media.rb#5
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/base.rb#3
class UserAgent::Browsers::Base < ::Array
  include ::UserAgent::Comparable

  # source://useragent//lib/user_agent/browsers/base.rb#6
  def <=>(other); end

  # source://useragent//lib/user_agent/browsers/base.rb#27
  def application; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/base.rb#67
  def bot?; end

  # source://useragent//lib/user_agent/browsers/base.rb#31
  def browser; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/base.rb#15
  def eql?(other); end

  # source://useragent//lib/user_agent/browsers/base.rb#51
  def method_missing(method, *args, &block); end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/base.rb#55
  def mobile?; end

  # source://useragent//lib/user_agent/browsers/base.rb#43
  def os; end

  # source://useragent//lib/user_agent/browsers/base.rb#39
  def platform; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/base.rb#47
  def respond_to?(symbol, include_all = T.unsafe(nil)); end

  # source://useragent//lib/user_agent/browsers/base.rb#88
  def to_h; end

  # source://useragent//lib/user_agent/browsers/base.rb#19
  def to_s; end

  # source://useragent//lib/user_agent/browsers/base.rb#23
  def to_str; end

  # source://useragent//lib/user_agent/browsers/base.rb#35
  def version; end

  private

  # source://useragent//lib/user_agent/browsers/base.rb#119
  def detect_comment(comment); end

  # source://useragent//lib/user_agent/browsers/base.rb#123
  def detect_comment_match(regexp); end

  # source://useragent//lib/user_agent/browsers/base.rb#115
  def detect_product(product); end
end

# source://useragent//lib/user_agent/browsers/chrome.rb#3
class UserAgent::Browsers::Chrome < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/chrome.rb#33
  def application; end

  # source://useragent//lib/user_agent/browsers/chrome.rb#14
  def browser; end

  # source://useragent//lib/user_agent/browsers/chrome.rb#18
  def build; end

  # source://useragent//lib/user_agent/browsers/chrome.rb#69
  def localization; end

  # source://useragent//lib/user_agent/browsers/chrome.rb#55
  def os; end

  # source://useragent//lib/user_agent/browsers/chrome.rb#37
  def platform; end

  # Prior to Safari 3, the user agent did not include a version number
  #
  # source://useragent//lib/user_agent/browsers/chrome.rb#23
  def version; end

  # source://useragent//lib/user_agent/browsers/chrome.rb#51
  def webkit; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/chrome.rb#4
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/chrome.rb#10
UserAgent::Browsers::Chrome::ChromeBrowsers = T.let(T.unsafe(nil), Array)

# source://useragent//lib/user_agent/browsers/edge.rb#3
class UserAgent::Browsers::Edge < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/edge.rb#10
  def browser; end

  # source://useragent//lib/user_agent/browsers/edge.rb#22
  def os; end

  # source://useragent//lib/user_agent/browsers/edge.rb#18
  def platform; end

  # source://useragent//lib/user_agent/browsers/edge.rb#14
  def version; end

  private

  # source://useragent//lib/user_agent/browsers/edge.rb#28
  def os_comment; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/edge.rb#6
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/edge.rb#4
UserAgent::Browsers::Edge::OS_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://useragent//lib/user_agent/browsers/gecko.rb#3
class UserAgent::Browsers::Gecko < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/gecko.rb#16
  def browser; end

  # source://useragent//lib/user_agent/browsers/gecko.rb#59
  def localization; end

  # source://useragent//lib/user_agent/browsers/gecko.rb#41
  def os; end

  # source://useragent//lib/user_agent/browsers/gecko.rb#25
  def platform; end

  # source://useragent//lib/user_agent/browsers/gecko.rb#37
  def security; end

  # source://useragent//lib/user_agent/browsers/gecko.rb#20
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/gecko.rb#4
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/gecko.rb#8
UserAgent::Browsers::Gecko::GeckoBrowsers = T.let(T.unsafe(nil), Array)

# The user agent for iTunes
#
# Some user agents:
# iTunes/10.6.1 (Macintosh; Intel Mac OS X 10.7.3) AppleWebKit/534.53.11
# iTunes/12.0.1 (Macintosh; OS X 10.10) AppleWebKit/0600.1.25
# iTunes/11.1.5 (Windows; Microsoft Windows 7 x64 Business Edition Service Pack 1 (Build 7601)) AppleWebKit/537.60.15
# iTunes/12.0.1 (Windows; Microsoft Windows 8 x64 Home Premium Edition (Build 9200)) AppleWebKit/7600.1017.0.24
# iTunes/12.0.1 (Macintosh; OS X 10.10.1) AppleWebKit/0600.1.25
#
# source://useragent//lib/user_agent/browsers/itunes.rb#11
class UserAgent::Browsers::ITunes < ::UserAgent::Browsers::Webkit
  # @return ["iTunes"] Always return iTunes as the browser
  #
  # source://useragent//lib/user_agent/browsers/itunes.rb#17
  def browser; end

  # @return [nil, Version] The WebKit version in use if we have it
  #
  # source://useragent//lib/user_agent/browsers/itunes.rb#32
  def build; end

  # Parses the operating system in use.
  #
  # @return [String] The operating system
  #
  # source://useragent//lib/user_agent/browsers/itunes.rb#64
  def full_os; end

  # Parses the operating system in use.
  #
  # @return [String] The operating system
  #
  # source://useragent//lib/user_agent/browsers/itunes.rb#39
  def os; end

  # @return [nil] nil - not included in the user agent
  #
  # source://useragent//lib/user_agent/browsers/itunes.rb#27
  def security; end

  # @return [Version] The version of iTunes in use
  #
  # source://useragent//lib/user_agent/browsers/itunes.rb#22
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/itunes.rb#12
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/internet_explorer.rb#3
class UserAgent::Browsers::InternetExplorer < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#19
  def browser; end

  # Before version 4.0, Chrome Frame declared itself (unversioned) in a comment;
  # as of 4.0 it can declare itself versioned in a comment
  # or as a separate product with a version
  #
  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#46
  def chromeframe; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#39
  def compatibility_view?; end

  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#57
  def os; end

  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#53
  def platform; end

  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#35
  def real_version; end

  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#28
  def trident_version; end

  # source://useragent//lib/user_agent/browsers/internet_explorer.rb#23
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/internet_explorer.rb#12
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/internet_explorer.rb#4
UserAgent::Browsers::InternetExplorer::TRIDENT_ENGINES = T.let(T.unsafe(nil), Hash)

# The user agent utilized by ffmpeg or other projects utilizing libavformat
#
# source://useragent//lib/user_agent/browsers/libavformat.rb#4
class UserAgent::Browsers::Libavformat < ::UserAgent::Browsers::Base
  # @return ["libavformat"] To make it easy to pick it out, all of the UAs that Lavf uses have this browser.
  #
  # source://useragent//lib/user_agent/browsers/libavformat.rb#12
  def browser; end

  # @return [nil] Lavf doesn't return us anything here
  #
  # source://useragent//lib/user_agent/browsers/libavformat.rb#22
  def os; end

  # @return [nil] Lavf doesn't return us anything here
  #
  # source://useragent//lib/user_agent/browsers/libavformat.rb#27
  def platform; end

  # @return [nil, Version] If the product is NSPlayer, we don't have a version
  #
  # source://useragent//lib/user_agent/browsers/libavformat.rb#17
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/libavformat.rb#5
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/opera.rb#3
class UserAgent::Browsers::Opera < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/opera.rb#10
  def browser; end

  # source://useragent//lib/user_agent/browsers/opera.rb#62
  def localization; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/opera.rb#48
  def mobile?; end

  # source://useragent//lib/user_agent/browsers/opera.rb#52
  def os; end

  # source://useragent//lib/user_agent/browsers/opera.rb#26
  def platform; end

  # source://useragent//lib/user_agent/browsers/opera.rb#36
  def security; end

  # source://useragent//lib/user_agent/browsers/opera.rb#14
  def version; end

  private

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/opera.rb#77
  def macintosh?; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/browsers/opera.rb#73
  def mini?; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/opera.rb#4
    def extend?(agent); end
  end
end

# Mozilla/5.0 (PLAYSTATION 3 4.75) AppleWebKit/531.22.8 (KHTML, like Gecko)
# Mozilla/5.0 (PLAYSTATION 3 4.76) AppleWebKit/531.22.8 (KHTML, like Gecko)
# Mozilla/5.0 (PLAYSTATION 3; 1.00)
# Mozilla/5.0 (PlayStation Vita 3.52) AppleWebKit/537.73 (KHTML, like Gecko) Silk/3.2
# Mozilla/5.0 (PlayStation 4 2.57) AppleWebKit/537.73 (KHTML, like Gecko)
#
# source://useragent//lib/user_agent/browsers/playstation.rb#8
class UserAgent::Browsers::PlayStation < ::UserAgent::Browsers::Base
  # Returns the name of the browser in use.
  #
  # @return [nil, String] the name of the browser
  #
  # source://useragent//lib/user_agent/browsers/playstation.rb#20
  def browser; end

  # PS Vita is mobile, others are not.
  #
  # @return [true, false] is this a mobile browser?
  #
  # source://useragent//lib/user_agent/browsers/playstation.rb#35
  def mobile?; end

  # Returns the operating system in use.
  #
  # @return [String] the operating system in use
  #
  # source://useragent//lib/user_agent/browsers/playstation.rb#42
  def os; end

  # Returns the platform in use.
  #
  # @return [nil, "PlayStation 3", "PlayStation 4", "PlayStation Vita"] the platform in use
  #
  # source://useragent//lib/user_agent/browsers/playstation.rb#49
  def platform; end

  # Returns the browser version in use. If Silk, returns the version of Silk.
  # Otherwise, returns the PS3/PS4 firmware version.
  #
  # @return [nil, Version] the version
  #
  # source://useragent//lib/user_agent/browsers/playstation.rb#65
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/playstation.rb#9
    def extend?(agent); end
  end
end

# Podcast Addict - Dalvik/1.6.0 (Linux; U; Android 4.4.2; LG-D631 Build/KOT49I.D63110b)
# Podcast Addict - Dalvik/2.1.0 (Linux; U; Android 5.1; XT1093 Build/LPE23.32-21.3)
# Podcast Addict - Mozilla/5.0 (Linux; U; Android 4.2.2; en-us; ALCATEL ONE TOUCH Fierce Build/JDQ39) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.2 Mobile Safari/534.30
# Podcast Addict - Mozilla/5.0 (Linux; U; Android 4.2.2; en-ca; ALCATEL ONE TOUCH 6040A Build/JDQ39) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.2 Mobile Safari/534.30
# Podcast Addict - Dalvik/2.1.0 (Linux; U; Android M Build/MPZ79M)
#
# source://useragent//lib/user_agent/browsers/podcast_addict.rb#8
class UserAgent::Browsers::PodcastAddict < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#13
  def browser; end

  # If we can figure out the device, return it.
  #
  # @return [nil, String] the device model
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#20
  def device; end

  # If we can figure out the device build, return it.
  #
  # @return [nil, String] the device build
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#30
  def device_build; end

  # Returns the localization, if known. We currently only know this for certain devices.
  #
  # @return [nil, String] the localization
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#40
  def localization; end

  # This is a mobile app, always return true.
  #
  # @return [true]
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#51
  def mobile?; end

  # Gets the operating system (some variant of Android, if we're certain that is the case)
  #
  # @return [nil, String] the operating system
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#58
  def os; end

  # Gets the platform (Android, if we're certain)
  #
  # @return [nil, "Android"] the platform
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#76
  def platform; end

  # Get the security level reported
  #
  # @return [:weak, :strong, :none] the security level
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#88
  def security; end

  # We aren't provided with the version :(
  #
  # @return [nil]
  #
  # source://useragent//lib/user_agent/browsers/podcast_addict.rb#98
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/podcast_addict.rb#9
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers.rb#19
UserAgent::Browsers::Security = T.let(T.unsafe(nil), Hash)

# source://useragent//lib/user_agent/browsers/vivaldi.rb#3
class UserAgent::Browsers::Vivaldi < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/vivaldi.rb#20
  def application; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#8
  def browser; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#12
  def build; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#56
  def localization; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#42
  def os; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#24
  def platform; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#16
  def version; end

  # source://useragent//lib/user_agent/browsers/vivaldi.rb#38
  def webkit; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/vivaldi.rb#4
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/webkit.rb#3
class UserAgent::Browsers::Webkit < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/webkit.rb#71
  def application; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#11
  def browser; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#21
  def build; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#117
  def localization; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#101
  def os; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#75
  def platform; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#97
  def security; end

  # Prior to Safari 3, the user agent did not include a version number
  #
  # source://useragent//lib/user_agent/browsers/webkit.rb#59
  def version; end

  # source://useragent//lib/user_agent/browsers/webkit.rb#89
  def webkit; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/webkit.rb#7
    def extend?(agent); end
  end
end

# source://useragent//lib/user_agent/browsers/webkit.rb#25
UserAgent::Browsers::Webkit::BuildVersions = T.let(T.unsafe(nil), Hash)

# source://useragent//lib/user_agent/browsers/webkit.rb#4
UserAgent::Browsers::Webkit::WEBKIT_PRODUCT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://useragent//lib/user_agent/browsers/webkit.rb#5
UserAgent::Browsers::Webkit::WEBKIT_VERSION_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://useragent//lib/user_agent/browsers/wechat_browser.rb#3
class UserAgent::Browsers::WechatBrowser < ::UserAgent::Browsers::Base
  # source://useragent//lib/user_agent/browsers/wechat_browser.rb#8
  def browser; end

  # source://useragent//lib/user_agent/browsers/wechat_browser.rb#29
  def os; end

  # source://useragent//lib/user_agent/browsers/wechat_browser.rb#17
  def platform; end

  # source://useragent//lib/user_agent/browsers/wechat_browser.rb#12
  def version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/wechat_browser.rb#4
    def extend?(agent); end
  end
end

# The user agent used by Windows Media Player or applications which utilize the
# Windows Media SDK.
#
# @note Both VLC and libavformat impersonate Windows Media Player when they think they
#   are using MMS (Microsoft Media Services/Windows Media Server).
#
# source://useragent//lib/user_agent/browsers/windows_media_player.rb#8
class UserAgent::Browsers::WindowsMediaPlayer < ::UserAgent::Browsers::Base
  # @return ["Windows Media Player"] All of the user agents we parse are Windows Media Player
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#39
  def browser; end

  # @return [true, false] Is this Windows Media Player 6.4 (NSPlayer 4.1) or Media Player 6.0 (NSPlayer 3.2)?
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#49
  def classic?; end

  # Check if the client supports the WMFSDK version passed in.
  #
  # @param version [String] The WMFSDK version to check for. For example, "9.0", "11.0", "12.0"
  # @return [true, false] Is this media player compatible with the passed WMFSDK version?
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#30
  def has_wmfsdk?(version); end

  # Check if our parsed OS is a mobile OS
  #
  # @return [true, false] Is this a mobile Windows Media Player?
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#56
  def mobile?; end

  # Parses the Windows Media Player version to figure out the host OS version
  #
  # User agents I have personally found:
  #
  # Windows 95 with Windows Media Player 6.4::
  #   NSPlayer/4.1.0.3857
  #
  # Windows 98 SE with Windows Media Player 6.01::
  #   NSPlayer/3.2.0.3564
  #
  # Womdpws 98 SE with Windows Media Player 6.4::
  #   NSPlayer/4.1.0.3857
  #   NSPlayer/4.1.0.3925
  #
  # Windows 98 SE with Windows Media Player 7.1::
  #   NSPlayer/7.1.0.3055
  #
  # Windows 98 SE with Windows Media Player 9.0::
  #   Windows-Media-Player/9.00.00.2980
  #   NSPlayer/9.0.0.2980 WMFSDK/9.0
  #
  # Windows 2000 with Windows Media Player 6.4::
  #   NSPlayer/4.1.0.3938
  #
  # Windows 2000 with Windows Media Player 7.1 (downgraded from WMP9)::
  #   NSPlayer/9.0.0.3268
  #   NSPlayer/9.0.0.3268 WMFSDK/9.0
  #   NSPlayer/9.0.0.3270 WMFSDK/9.0
  #   NSPlayer/9.0.0.2980
  #
  # Windows 2000 with Windows Media Player 9.0::
  #   NSPlayer/9.0.0.3270 WMFSDK/9.0
  #   Windows-Media-Player/9.00.00.3367
  #
  # Windows XP with Windows Media Player 6.4::
  #   NSPlayer/4.1.0.3936
  #
  # Windows XP with Windows Media Player 9::
  #   NSPlayer/9.0.0.4503
  #   NSPlayer/9.0.0.4503 WMFSDK/9.0
  #   Windows-Media-Player/9.00.00.4503
  #
  # Windows XP with Windows Media Player 10::
  #   NSPlayer/10.0.0.3802
  #   NSPlayer/10.0.0.3802 WMFSDK/10.0
  #   Windows-Media-Player/10.00.00.3802
  #
  # Windows XP with Windows Media Player 11::
  #   NSPlayer/11.0.5721.5262
  #   NSPlayer/11.0.5721.5262 WMFSDK/11.0
  #   Windows-Media-Player/11.0.5721.5262
  #
  # Windows Vista with Windows Media Player 11::
  #   NSPlayer/11.00.6002.18392 WMFSDK/11.00.6002.18392
  #   NSPlayer/11.0.6002.18005
  #   NSPlayer/11.0.6002.18049 WMFSDK/11.0
  #   Windows-Media-Player/11.0.6002.18311
  #
  # Windows 8.1 with Windows Media Player 12::
  #   NSPlayer/12.00.9600.17031 WMFSDK/12.00.9600.17031
  #
  # Windows 10 with Windows Media Player 12::
  #   Windows-Media-Player/12.0.9841.0
  #   NSPlayer/12.00.9841.0000 WMFSDK/12.00.9841.0000
  #
  # Windows Phone 8.1 (Podcasts app)::
  #   NSPlayer/12.00.9651.0000 WMFSDK/12.00.9651.0000
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#127
  def os; end

  # @return ["Windows"] All of the user agents we parse are on Windows
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#44
  def platform; end

  # The Windows Media Format SDK version
  #
  # @return [Version, nil] The WMFSDK version
  #
  # source://useragent//lib/user_agent/browsers/windows_media_player.rb#21
  def wmfsdk_version; end

  class << self
    # @return [Boolean]
    #
    # source://useragent//lib/user_agent/browsers/windows_media_player.rb#9
    def extend?(agent); end
  end
end

# A custom Comparable module that will always return false
# if the <=> returns false
#
# source://useragent//lib/user_agent/comparable.rb#4
module UserAgent::Comparable
  # source://useragent//lib/user_agent/comparable.rb#5
  def <(other); end

  # source://useragent//lib/user_agent/comparable.rb#9
  def <=(other); end

  # source://useragent//lib/user_agent/comparable.rb#13
  def ==(other); end

  # source://useragent//lib/user_agent/comparable.rb#17
  def >(other); end

  # source://useragent//lib/user_agent/comparable.rb#21
  def >=(other); end
end

# source://useragent//lib/user_agent.rb#15
UserAgent::DEFAULT_USER_AGENT = T.let(T.unsafe(nil), String)

# http://www.texsoft.it/index.php?m=sw.php.useragent
#
# source://useragent//lib/user_agent.rb#8
UserAgent::MATCHER = T.let(T.unsafe(nil), Regexp)

# source://useragent//lib/user_agent/operating_systems.rb#2
module UserAgent::OperatingSystems
  class << self
    # source://useragent//lib/user_agent/operating_systems.rb#26
    def normalize_chrome_os(os); end

    # source://useragent//lib/user_agent/operating_systems.rb#37
    def normalize_ios(os); end

    # source://useragent//lib/user_agent/operating_systems.rb#48
    def normalize_mac_os_x(os); end

    # source://useragent//lib/user_agent/operating_systems.rb#21
    def normalize_os(os); end
  end
end

# source://useragent//lib/user_agent/operating_systems.rb#3
UserAgent::OperatingSystems::IOS_VERSION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://useragent//lib/user_agent/operating_systems.rb#5
UserAgent::OperatingSystems::Windows = T.let(T.unsafe(nil), Hash)

# source://useragent//lib/user_agent/version.rb#2
class UserAgent::Version
  include ::Comparable

  # @return [Version] a new instance of Version
  #
  # source://useragent//lib/user_agent/version.rb#18
  def initialize(str); end

  # source://useragent//lib/user_agent/version.rb#65
  def <=>(other); end

  # source://useragent//lib/user_agent/version.rb#52
  def ==(other); end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/version.rb#48
  def eql?(other); end

  # source://useragent//lib/user_agent/version.rb#100
  def inspect; end

  # @return [Boolean]
  #
  # source://useragent//lib/user_agent/version.rb#36
  def nil?; end

  # source://useragent//lib/user_agent/version.rb#40
  def to_a; end

  # source://useragent//lib/user_agent/version.rb#96
  def to_s; end

  # source://useragent//lib/user_agent/version.rb#44
  def to_str; end

  class << self
    # source://useragent//lib/user_agent/version.rb#5
    def new(obj = T.unsafe(nil)); end
  end
end
