# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `identity_validations` gem.
# Please instead update this file by running `bin/tapioca gem identity_validations`.


# source://identity_validations//lib/identity_validations/version.rb#3
module IdentityValidations; end

# source://identity_validations//lib/identity_validations/allowed_redirects_validator.rb#2
class IdentityValidations::AllowedRedirectsValidator < ::IdentityValidations::IdentityValidator
  # source://identity_validations//lib/identity_validations/allowed_redirects_validator.rb#3
  def validate(record); end
end

# source://identity_validations//lib/identity_validations/certs_are_x509_validator.rb#2
class IdentityValidations::CertsAreX509Validator < ::IdentityValidations::IdentityValidator
  # source://identity_validations//lib/identity_validations/certs_are_x509_validator.rb#3
  def validate(record); end

  private

  # source://identity_validations//lib/identity_validations/certs_are_x509_validator.rb#18
  def cert_content(cert); end
end

# source://identity_validations//lib/identity_validations.rb#13
class IdentityValidations::Error < ::StandardError; end

# source://identity_validations//lib/identity_validations/identity_validator.rb#2
class IdentityValidations::IdentityValidator < ::ActiveModel::Validator
  # source://identity_validations//lib/identity_validations/identity_validator.rb#9
  def attribute; end

  # Sets the attribute attribute
  #
  # @param value the value to set the attribute attribute to.
  #
  # source://identity_validations//lib/identity_validations/identity_validator.rb#3
  def attribute=(_arg0); end

  # I was tempted to make `record` an instance variable with an accessor, but that could
  # cause problems with how Rails instantiates and reuses validator instances
  #
  # source://identity_validations//lib/identity_validations/identity_validator.rb#15
  def get_attribute(record); end

  # @raise [NotImplementedError]
  #
  # source://identity_validations//lib/identity_validations/identity_validator.rb#5
  def validate(record); end
end

# Applies consistent validations to service providers
# These validations should be included for any application that validates a service provider record
#
# source://identity_validations//lib/identity_validations/service_provider_validation.rb#8
module IdentityValidations::ServiceProviderValidation
  class << self
    # @private
    #
    # source://identity_validations//lib/identity_validations/service_provider_validation.rb#9
    def included(base); end
  end
end

# Note: We no longer have strong validation of the issuer string.
#         We used to require that the issuer matched this format:
#         'urn:gov:gsa:<protocol>:2.0.profiles:sp:sso:<agency>:<app name>'
#         However, it was too restrictive for many COTS applications. Now,
#         we just enforce uniqueness, without whitespace.
#
# source://identity_validations//lib/identity_validations/service_provider_validation.rb#33
IdentityValidations::ServiceProviderValidation::ISSUER_FORMAT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://identity_validations//lib/identity_validations/uri_validator.rb#2
class IdentityValidations::UriValidator < ::IdentityValidations::IdentityValidator
  # source://identity_validations//lib/identity_validations/uri_validator.rb#3
  def validate(record); end
end

# source://identity_validations//lib/identity_validations/version.rb#4
IdentityValidations::VERSION = T.let(T.unsafe(nil), String)

# source://identity_validations//lib/identity_validations/validating_uri.rb#2
class IdentityValidations::ValidatingURI
  # @return [ValidatingURI] a new instance of ValidatingURI
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#6
  def initialize(string); end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#35
  def custom?; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#55
  def custom_scheme?; end

  # Not a strict definition of native uri, but a catch-all
  # to ensure we have the bare minimum
  #
  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#43
  def native?; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#13
  def parseable?; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#23
  def unsupported?; end

  # Returns the value of attribute uri.
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#3
  def uri; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#17
  def valid?; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#29
  def web?; end

  # @return [Boolean]
  #
  # source://identity_validations//lib/identity_validations/validating_uri.rb#49
  def with_wildcards?; end
end
