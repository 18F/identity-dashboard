# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `identity-hostdata` gem.
# Please instead update this file by running `bin/tapioca gem identity-hostdata`.


# source://identity-hostdata//lib/identity/hostdata/config_builder.rb#6
module Identity; end

# source://identity-hostdata//lib/identity/hostdata/config_builder.rb#7
module Identity::Hostdata
  class << self
    # @return [S3] An S3 object configured to use the app-secrets bucket
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#113
    def app_secrets_s3(logger: T.unsafe(nil), s3_client: T.unsafe(nil)); end

    # @return [String]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#98
    def aws_account_id; end

    # @return [String]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#93
    def aws_region; end

    # @return [String]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#108
    def bucket_name(name); end

    # Returns the value of attribute config.
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#18
    def config; end

    # Returns the value of attribute config_builder.
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#18
    def config_builder; end

    # @return [Logger]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#135
    def default_logger; end

    # @return [String]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#22
    def domain; end

    # @return [EC2]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#103
    def ec2; end

    # @return [String]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#30
    def env; end

    # @return [Hash] parses the environment's config JSON
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#53
    def host_config; end

    # @raise [LocalJumpError]
    # @yield Executes a block if in_datacenter?
    # @yieldparam hostdata
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#87
    def in_datacenter; end

    # @return [Boolean]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#79
    def in_datacenter?; end

    # @return [String]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#71
    def instance_role; end

    # Sets +.config+ and +.config_builder+
    #
    # @param rails_env [String] the +Rails.env+
    # @see Identity::Hostdata::ConfigBuilder
    # @yieldparam builder [Identity::Hostdata::ConfigBuilder] yields the config builder, keys can be added via +builder#add+
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#41
    def load_config!(app_root:, rails_env:, logger: T.unsafe(nil), s3_client: T.unsafe(nil), write_copy_to: T.unsafe(nil), &block); end

    # @return [Logger]
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#135
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#144
    def logger=(_arg0); end

    # Used to clear memoized values (intended for specs)
    #
    # @api private
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#149
    def reset!; end

    # Returns the value of attribute root.
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#142
    def root; end

    # Sets the attribute root
    #
    # @param value the value to set the attribute root to.
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#142
    def root=(_arg0); end

    # @return [S3] An S3 object configured to use the secrets bucket
    #
    # source://identity-hostdata//lib/identity/hostdata.rb#124
    def secrets_s3(logger: T.unsafe(nil), s3_client: T.unsafe(nil)); end
  end
end

# source://identity-hostdata//lib/identity/hostdata.rb#12
Identity::Hostdata::CONFIG_DIR = T.let(T.unsafe(nil), String)

# Helps build configurations, has a method +#add+ for defining values and their types
# Retains type information on the builder itself (+#key_types+) as well as +#unused_keys+
#
# source://identity-hostdata//lib/identity/hostdata/config_builder.rb#10
class Identity::Hostdata::ConfigBuilder
  # @return [ConfigBuilder] a new instance of ConfigBuilder
  #
  # source://identity-hostdata//lib/identity/hostdata/config_builder.rb#62
  def initialize; end

  # @param key [Symbol] secret property name
  # @param secrets_manager_name [String] if present, the secret_id for Secrets Manager to get
  #   the value from in a deployed environment
  # @param type [Symbol] secret type, used to parse raw value
  # @param allow_nil [Boolean] whether or not a nil value is allowed
  # @param enum [nil, Array] list of allowed values
  # @param options [Hash] options hash, passed to per-type converter
  #
  # source://identity-hostdata//lib/identity/hostdata/config_builder.rb#74
  def add(key, secrets_manager_name: T.unsafe(nil), type: T.unsafe(nil), allow_nil: T.unsafe(nil), enum: T.unsafe(nil), options: T.unsafe(nil)); end

  # @example
  #   struct = config_builder.build!(values) do |builder|
  #   builder.add(:my_key, type: :string)
  #   end
  # @param values [Hash] the configuration values to read from to populate the config
  # @return [RedactedStruct]
  # @yieldparam builder [ConfigBuilder] for defining configuration values and types
  #
  # source://identity-hostdata//lib/identity/hostdata/config_builder.rb#114
  def build!(values); end

  # Returns the value of attribute key_types.
  #
  # source://identity-hostdata//lib/identity/hostdata/config_builder.rb#60
  def key_types; end

  # source://identity-hostdata//lib/identity/hostdata/config_builder.rb#130
  def secrets_client; end

  # Returns the value of attribute unused_keys.
  #
  # source://identity-hostdata//lib/identity/hostdata/config_builder.rb#60
  def unused_keys; end
end

# source://identity-hostdata//lib/identity/hostdata/config_builder.rb#11
Identity::Hostdata::ConfigBuilder::CONVERTERS = T.let(T.unsafe(nil), Hash)

# source://identity-hostdata//lib/identity/hostdata/config_reader.rb#11
class Identity::Hostdata::ConfigReader
  # @param app_root [Pathname]
  # @return [ConfigReader] a new instance of ConfigReader
  #
  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#15
  def initialize(app_root:, s3_client: T.unsafe(nil), logger: T.unsafe(nil)); end

  # Returns the value of attribute app_root.
  #
  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#12
  def app_root; end

  # Returns the value of attribute logger.
  #
  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#12
  def logger; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#25
  def read_configuration(rails_env, write_copy_to: T.unsafe(nil)); end

  private

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#87
  def app_configuration_path_component; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#78
  def app_configuration_s3_path; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#51
  def app_override_configuration; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#74
  def app_secrets_s3; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#39
  def base_configuration; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#47
  def default_configuration; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#94
  def role_configuration_filename; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#82
  def role_configuration_s3_path; end

  # source://identity-hostdata//lib/identity/hostdata/config_reader.rb#61
  def role_override_configuration; end
end

# source://identity-hostdata//lib/identity/hostdata.rb#13
Identity::Hostdata::DOMAIN_PATH = T.let(T.unsafe(nil), String)

# Class to wrap accessing the EC2 metadata service
#
# source://identity-hostdata//lib/identity/hostdata/ec2.rb#6
class Identity::Hostdata::EC2
  # @param document [Hash] An instance identity document parsed from JSON
  #   returned by the EC2 metadata service at
  #   http://169.254.169.254/2016-09-02/dynamic/instance-identity/document
  # @return [EC2] a new instance of EC2
  #
  # source://identity-hostdata//lib/identity/hostdata/ec2.rb#34
  def initialize(document); end

  # @return [String] Current AWS account ID
  #
  # source://identity-hostdata//lib/identity/hostdata/ec2.rb#44
  def account_id; end

  # Returns the value of attribute document.
  #
  # source://identity-hostdata//lib/identity/hostdata/ec2.rb#29
  def document; end

  # @return [String] Current EC2 region
  #
  # source://identity-hostdata//lib/identity/hostdata/ec2.rb#39
  def region; end

  class << self
    # @api private
    #
    # source://identity-hostdata//lib/identity/hostdata/ec2.rb#16
    def http; end

    # Standard initializer
    #
    # @return [EC2]
    #
    # source://identity-hostdata//lib/identity/hostdata/ec2.rb#10
    def load; end

    # get token
    #
    # source://identity-hostdata//lib/identity/hostdata/ec2.rb#25
    def v2_token; end
  end
end

# source://identity-hostdata//lib/identity/hostdata.rb#14
Identity::Hostdata::ENV_PATH = T.let(T.unsafe(nil), String)

# source://identity-hostdata//lib/identity/hostdata.rb#15
Identity::Hostdata::INSTANCE_ROLE_PATH = T.let(T.unsafe(nil), String)

# source://identity-hostdata//lib/identity/hostdata.rb#10
class Identity::Hostdata::MissingConfigError < ::StandardError; end

# source://identity-hostdata//lib/identity/hostdata/s3.rb#8
class Identity::Hostdata::S3
  # @return [S3] a new instance of S3
  #
  # source://identity-hostdata//lib/identity/hostdata/s3.rb#11
  def initialize(bucket:, env:, region:, s3_client: T.unsafe(nil), logger: T.unsafe(nil)); end

  # Returns the value of attribute bucket.
  #
  # source://identity-hostdata//lib/identity/hostdata/s3.rb#9
  def bucket; end

  # source://identity-hostdata//lib/identity/hostdata/s3.rb#19
  def download_file(s3_path:, local_path:); end

  # Returns the value of attribute env.
  #
  # source://identity-hostdata//lib/identity/hostdata/s3.rb#9
  def env; end

  # Returns the value of attribute logger.
  #
  # source://identity-hostdata//lib/identity/hostdata/s3.rb#9
  def logger; end

  # source://identity-hostdata//lib/identity/hostdata/s3.rb#28
  def read_file(s3_path); end

  # Returns the value of attribute region.
  #
  # source://identity-hostdata//lib/identity/hostdata/s3.rb#9
  def region; end

  private

  # source://identity-hostdata//lib/identity/hostdata/s3.rb#40
  def build_key(s3_path, response_target = T.unsafe(nil)); end

  # source://identity-hostdata//lib/identity/hostdata/s3.rb#44
  def make_s3_get_object_request(key:, response_target: T.unsafe(nil)); end

  # source://identity-hostdata//lib/identity/hostdata/s3.rb#52
  def s3_client; end
end

# source://identity-hostdata//lib/identity/hostdata/version.rb#4
Identity::Hostdata::VERSION = T.let(T.unsafe(nil), String)
