# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby_regex` gem.
# Please instead update this file by running `bin/tapioca gem ruby_regex`.


# source://ruby_regex//lib/ruby_regex.rb#1
module RubyRegex; end

# CreditCard
# Validates Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, space or nothing
#
# source://ruby_regex//lib/ruby_regex.rb#17
RubyRegex::CreditCard = T.let(T.unsafe(nil), Regexp)

# Date DB format YYYY-MM-DD
# I know it will validate 2001-02-31 but is I think we are focusing in formats more than in parsing
#
# source://ruby_regex//lib/ruby_regex.rb#59
RubyRegex::DBDate = T.let(T.unsafe(nil), Regexp)

# Date Time DB format YYYY-MM-DD hh:mm:ss
#
# source://ruby_regex//lib/ruby_regex.rb#62
RubyRegex::DBDateTime = T.let(T.unsafe(nil), Regexp)

# Del.icio.us username
#
# source://ruby_regex//lib/ruby_regex.rb#46
RubyRegex::DeliciousUsername = T.let(T.unsafe(nil), Regexp)

# Dni (spanish ID card)
#
# source://ruby_regex//lib/ruby_regex.rb#7
RubyRegex::Dni = T.let(T.unsafe(nil), Regexp)

# Domain
#
# source://ruby_regex//lib/ruby_regex.rb#13
RubyRegex::Domain = T.let(T.unsafe(nil), Regexp)

# Email
# From the email regex research: http://fightingforalostcause.net/misc/2006/compare-email-regex.php
# Authors: James Watts and Francisco Jose Martin Moreno
#
# source://ruby_regex//lib/ruby_regex.rb#51
RubyRegex::Email = T.let(T.unsafe(nil), Regexp)

# General postal code
# Validates a 5 digits postal code
#
# source://ruby_regex//lib/ruby_regex.rb#30
RubyRegex::GeneralPostalCode = T.let(T.unsafe(nil), Regexp)

# Github username
#
# source://ruby_regex//lib/ruby_regex.rb#40
RubyRegex::GithubUsername = T.let(T.unsafe(nil), Regexp)

# IBAN
# Source: http://snipplr.com/view/15322/iban-regex-all-ibans/
# You have to remove spaces or any separator character from the original field before use this regex
#
# source://ruby_regex//lib/ruby_regex.rb#70
RubyRegex::IBAN = T.let(T.unsafe(nil), Regexp)

# MacAddress
#
# source://ruby_regex//lib/ruby_regex.rb#73
RubyRegex::MacAddress = T.let(T.unsafe(nil), Regexp)

# MasterCard credit card
#
# source://ruby_regex//lib/ruby_regex.rb#20
RubyRegex::MasterCard = T.let(T.unsafe(nil), Regexp)

# Slideshare username
#
# source://ruby_regex//lib/ruby_regex.rb#43
RubyRegex::SlideshareUsername = T.let(T.unsafe(nil), Regexp)

# SpanishBankAccountNumber
#
# source://ruby_regex//lib/ruby_regex.rb#65
RubyRegex::SpanishBankAccountNumber = T.let(T.unsafe(nil), Regexp)

# Twitter username
#
# source://ruby_regex//lib/ruby_regex.rb#37
RubyRegex::TwitterUsername = T.let(T.unsafe(nil), Regexp)

# source://ruby_regex//lib/ruby_regex.rb#10
RubyRegex::URL = T.let(T.unsafe(nil), Regexp)

# US Social Security
#
# source://ruby_regex//lib/ruby_regex.rb#26
RubyRegex::USSocialSecurity = T.let(T.unsafe(nil), Regexp)

# UUID
# Validates a UUID as defined: http://en.wikipedia.org/wiki/Universally_unique_identifier
#
# source://ruby_regex//lib/ruby_regex.rb#55
RubyRegex::UUID = T.let(T.unsafe(nil), Regexp)

# URL
#
# source://ruby_regex//lib/ruby_regex.rb#10
RubyRegex::Url = T.let(T.unsafe(nil), Regexp)

# Username
# This regular expression doesn't validate username's length
#
# source://ruby_regex//lib/ruby_regex.rb#4
RubyRegex::Username = T.let(T.unsafe(nil), Regexp)

# Visa credit card
#
# source://ruby_regex//lib/ruby_regex.rb#23
RubyRegex::Visa = T.let(T.unsafe(nil), Regexp)

# US ZIP code
# Validates US ZIP Code (basic and extended format)
#
# source://ruby_regex//lib/ruby_regex.rb#34
RubyRegex::ZIPCode = T.let(T.unsafe(nil), Regexp)
