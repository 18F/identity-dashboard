# Jobs defined here use the idp/ci docker image from ECR by default. To find
# other available images:
#   aws ecr describe-repositories | jq '.repositories[].repositoryUri'
# Images are built via the identity-devops GitLab pipeline.

variables:
  ECR_REGISTRY: '${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
  IDP_WORKER_IMAGE_TAG: 'main'
  IDP_IMAGE_TAG: 'main'
  PKI_IMAGE_TAG: 'main'
  DASHBOARD_CI_SHA: 'sha256:d57dc827173b1d8573b21bfd532551d86cb09292fc49439a8b9eefcced4bd369'
  GITLAB_CI: 'true'

default:
  image: '${ECR_REGISTRY}/dashboard/ci:latest'

.bundle_install: &bundle_install
  - bundle check || bundle install --deployment --jobs=4 --retry=3 --without deploy development doc production --path vendor/ruby

.yarn_install: &yarn_install
  - yarn install --frozen-lockfile --ignore-engines --cache-folder .yarn-cache

.yarn_production_install: &yarn_production_install
  - yarn install --production --frozen-lockfile --ignore-engines --cache-folder .yarn-cache

.build_cache:
  - &ruby_cache
    key:
      files:
        - Gemfile.lock
    paths:
      - vendor/ruby
    policy: pull

  - &yarn_cache
    key:
      files:
        - yarn.lock
    paths:
      - .yarn-cache/
    policy: pull

  - &yarn_production_cache
    key:
      files:
        - yarn.lock
    paths:
      - .yarn-cache/
    policy: pull

  - &assets_cache
    key: $CI_COMMIT_SHA
    paths:
      - tmp/cache/assets
      - public/assets
      - public/packs
    policy: pull

stages:
  - build
  - test
  - review
  - scan
  - eks_release

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "external_pull_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "external_pull_request_event" || $CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "stages/prod" || $CI_COMMIT_BRANCH =~ /^cmccarthy\/rc-.+/'
    - if: '$CI_MERGE_REQUEST_IID || $CI_EXTERNAL_PULL_REQUEST_IID'

install:
  stage: build
  variables:
    RAILS_ENV: test
    SKIP_YARN_INSTALL: 'true'
  cache:
    - <<: *ruby_cache
      policy: pull-push
    - <<: *yarn_cache
      policy: pull-push
    - <<: *assets_cache
      policy: push
  script:
    - *bundle_install
    - *yarn_install
    - bundle exec rake assets:precompile

# Build a container image async, and don't block CI tests
# Cache intermediate images for 1 week (168 hours)
build-dashboard-image:
  stage: review
  needs: []
  interruptible: true
  variables:
    BRANCH_TAGGING_STRING: ''
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        BRANCH_TAGGING_STRING: "--destination ${ECR_REGISTRY}/identity-dashboard/review:main"
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - mkdir -p /kaniko/.docker
    - |-
      KANIKOCFG="\"credsStore\":\"ecr-login\""
      if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
        KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
      fi
      KANIKOCFG="{ ${KANIKOCFG} }"
      echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/idp_dashboard.Dockerfile"
      --destination "${ECR_REGISTRY}/identity-dashboard/review:${CI_COMMIT_SHA}"
      ${BRANCH_TAGGING_STRING}
      --cache-repo="${ECR_REGISTRY}/identity-dashboard/review/cache"
      --cache-ttl=168h
      --cache=true
      --compressed-caching=false
      --build-arg "http_proxy=${http_proxy}" --build-arg "https_proxy=${https_proxy}" --build-arg "no_proxy=${no_proxy}"


lint:
  stage: test
  needs:
    - job: install
  cache:
    - <<: *ruby_cache
    - <<: *yarn_cache
    - <<: *assets_cache
  script:
    - *bundle_install
    - *yarn_install
    - make lint
  artifacts:
    expire_in: 31d
    when: always
    paths:
      - rubocop.xml
    reports:
      junit: rubocop.xml

review-app:
  stage: review
  allow_failure: true
  needs:
    - job: build-dashboard-image
  resource_group: $CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov
  image:
    name: dtzar/helm-kubectl:latest
  script:
    - kubectl config get-contexts
    - export CONTEXT=$(kubectl config get-contexts | grep -v CURRENT | grep review | awk '{print $1}' | head -1)
    - kubectl config use-context "$CONTEXT"
    - |-
      export IDP_ENV=$(cat <<EOF
      [
        {"name": "KUBERNETES_REVIEW_APP", "value": "true"},
        {"name": "POSTGRES_SSLMODE", "value": "prefer"},
        {"name": "POSTGRES_NAME", "value": "idp"},
        {"name": "POSTGRES_HOST","value": "$CI_ENVIRONMENT_SLUG-login-chart-pg.review-apps"},
        {"name": "POSTGRES_USERNAME", "value": "postgres"},
        {"name": "POSTGRES_PASSWORD", "value": "postgres"},
        {"name": "POSTGRES_WORKER_SSLMODE", "value": "prefer"},
        {"name": "POSTGRES_WORKER_NAME", "value": "idp-worker-jobs"},
        {"name": "POSTGRES_WORKER_HOST", "value": "$CI_ENVIRONMENT_SLUG-login-chart-pg.review-apps"},
        {"name": "POSTGRES_WORKER_USERNAME", "value": "postgres"},
        {"name": "POSTGRES_WORKER_PASSWORD", "value": "postgres"},
        {"name": "RAILS_OFFLINE", "value": "true"},
        {"name": "REDIS_IRS_ATTEMPTS_API_URL", "value": "redis://$CI_ENVIRONMENT_SLUG-login-chart-redis.review-apps:6379/2"},
        {"name": "REDIS_THROTTLE_URL", "value": "redis://$CI_ENVIRONMENT_SLUG-login-chart-redis.review-apps:6379/1"},
        {"name": "REDIS_URL", "value": "redis://$CI_ENVIRONMENT_SLUG-login-chart-redis.review-apps:6379"},
        {"name": "ASSET_HOST", "value": "https://$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "DOMAIN_NAME", "value": "$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "LOGIN_DATACENTER", "value": "true" },
        {"name": "LOGIN_DOMAIN", "value": "identitysandbox.gov"},
        {"name": "LOGIN_ENV", "value": "$CI_ENVIRONMENT_SLUG" },
        {"name": "LOGIN_HOST_ROLE", "value": "idp" },
        {"name": "LOGIN_SKIP_REMOTE_CONFIG", "value": "true" },
        {"name": "PIV_CAC_SERVICE_URL", "value": "https://$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov/"},
        {"name": "PIV_CAC_VERIFY_TOKEN_URL", "value": "https://$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov/"},
        {"name": "DASHBOARD_URL", "value": "https://$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov"}
      ]
      EOF
      )
    - |-
      export WORKER_ENV=$(cat <<EOF
      [
        {"name": "KUBERNETES_REVIEW_APP", "value": "true"},
        {"name": "POSTGRES_SSLMODE", "value": "prefer"},
        {"name": "POSTGRES_NAME", "value": "idp"},
        {"name": "POSTGRES_HOST", "value": "$CI_ENVIRONMENT_SLUG-login-chart-pg.review-apps"},
        {"name": "POSTGRES_USERNAME", "value": "postgres"},
        {"name": "POSTGRES_PASSWORD", "value": "postgres"},
        {"name": "POSTGRES_WORKER_SSLMODE", "value": "prefer"},
        {"name": "POSTGRES_WORKER_NAME", "value": "idp-worker-jobs"},
        {"name": "POSTGRES_WORKER_HOST", "value": "$CI_ENVIRONMENT_SLUG-login-chart-pg.review-apps"},
        {"name": "POSTGRES_WORKER_USERNAME", "value": "postgres"},
        {"name": "POSTGRES_WORKER_PASSWORD", "value": "postgres"},
        {"name": "RAILS_OFFLINE", "value": "true"},
        {"name": "REDIS_IRS_ATTEMPTS_API_URL", "value": "redis://$CI_ENVIRONMENT_SLUG-login-chart-redis.review-apps:6379/2"},
        {"name": "REDIS_THROTTLE_URL", "value": "redis://$CI_ENVIRONMENT_SLUG-login-chart-redis.review-apps:6379/1"},
        {"name": "REDIS_URL", "value": "redis://$CI_ENVIRONMENT_SLUG-login-chart-redis.review-apps:6379"},
        {"name": "ASSET_HOST", "value": "https://$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "DOMAIN_NAME", "value": "$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "LOGIN_DATACENTER", "value": "true" },
        {"name": "LOGIN_DOMAIN", "value": "identitysandbox.gov"},
        {"name": "LOGIN_ENV", "value": "$CI_ENVIRONMENT_SLUG" },
        {"name": "LOGIN_HOST_ROLE", "value": "worker" },
        {"name": "LOGIN_SKIP_REMOTE_CONFIG", "value": "true" },
        {"name": "PIV_CAC_SERVICE_URL", "value": "https://$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov/"},
        {"name": "PIV_CAC_VERIFY_TOKEN_URL", "value": "https://$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov/"}
      ]
      EOF
      )
    - |-
      export PIVCAC_ENV=$(cat <<EOF
      [
        {"name": "KUBERNETES_REVIEW_APP", "value": "true"},
        {"name": "CLIENT_CERT_S3_BUCKET", "value": "login-gov-pivcac-public-cert-reviewapp.894947205914-us-west-2"},
        {"name": "POSTGRES_SSLMODE", "value": "prefer"},
        {"name": "POSTGRES_NAME", "value": "identity_pki_production"},
        {"name": "POSTGRES_HOST","value": "$CI_ENVIRONMENT_SLUG-login-chart-pivcac-pg.review-apps"},
        {"name": "POSTGRES_USERNAME", "value": "postgres"},
        {"name": "POSTGRES_PASSWORD", "value": "pivcac"},
        {"name": "IDP_HOST", "value": "$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "DOMAIN_NAME", "value": "$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov"}
      ]
      EOF
      )
    - |-
      export DASHBOARD_ENV=$(cat <<EOF
      [
        {"name": "KUBERNETES_REVIEW_APP", "value": "true"},
        {"name": "POSTGRES_SSLMODE", "value": "prefer"},
        {"name": "POSTGRES_DB", "value": "dashboard"},
        {"name": "POSTGRES_HOST","value": "$CI_ENVIRONMENT_SLUG-login-chart-dashboard-pg.review-apps"},
        {"name": "POSTGRES_USERNAME", "value": "postgres"},
        {"name": "POSTGRES_PASSWORD", "value": "postgres"},
        {"name": "NEW_RELIC_ENABLED", "value": "false"},
        {"name": "SAML_SP_ISSUER", "value": "https://$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov"},
        {"name": "IDP_URL", "value": "https://$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "IDP_SP_URL", "value": "https://$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov"},
        {"name": "POST_LOGOUT_URL", "value": "https://$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov"},
        {"name": "DOMAIN_NAME", "value": "$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov"}
      ]
      EOF
      )
    - git clone -b main --single-branch https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.login.gov/lg-public/identity-idp-helm-chart.git
    - >-
      helm upgrade --install --namespace review-apps
      --debug
      --set idp.image.repository="${ECR_REGISTRY}/identity-idp/review"
      --set idp.image.tag="${IDP_IMAGE_TAG}"
      --set idp.image.pullPolicy="Always"
      --set worker.image.repository="${ECR_REGISTRY}/identity-idp/review"
      --set worker.image.tag="${IDP_WORKER_IMAGE_TAG}"
      --set worker.image.pullPolicy="Always"
      --set pivcac.image.repository="${ECR_REGISTRY}/identity-pivcac/review"
      --set pivcac.image.tag="${PKI_IMAGE_TAG}"
      --set pivcac.image.pullPolicy="Always"
      --set dashboard.image.repository="${ECR_REGISTRY}/identity-dashboard/review"
      --set dashboard.image.tag="${CI_COMMIT_SHA}"
      --set-json dashboard.env="$DASHBOARD_ENV"
      --set-json dashboard.enabled=true
      --set-json idp.env="$IDP_ENV"
      --set-json worker.env="$WORKER_ENV"
      --set-json pivcac.env="$PIVCAC_ENV"
      --set-json idp.ingress.hosts="[{\"host\": \"$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov\", \"paths\": [{\"path\": \"/\", \"pathType\": \"Prefix\"}]}]"
      --set-json pivcac.ingress.hosts="[{\"host\": \"$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov\", \"paths\": [{\"path\": \"/\", \"pathType\": \"Prefix\"}]}]"
      --set-json dashboard.ingress.hosts="[{\"host\": \"$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov\", \"paths\": [{\"path\": \"/\", \"pathType\": \"Prefix\"}]}]"
      $CI_ENVIRONMENT_SLUG ./identity-idp-helm-chart
    - echo "DNS may take a while to propagate, so be patient if it doesn't show up right away"
    - echo "To access the rails console, first run 'aws-vault exec sandbox-power -- aws eks update-kubeconfig --name review_app'"
    - echo "Then run aws-vault exec sandbox-power -- kubectl exec -it service/$CI_ENVIRONMENT_SLUG-login-chart-idp -n review-apps -- /app/bin/rails console"
    - echo "Address of IDP review app:"
    - echo https://$CI_ENVIRONMENT_SLUG.review-app.identitysandbox.gov
    - echo "Address of PIVCAC review app:"
    - echo https://$CI_ENVIRONMENT_SLUG-review-app.pivcac.identitysandbox.gov
    - echo "Address of Dashboard review app:"
    - echo https://$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG-review-app-dashboard.review-app.identitysandbox.gov
    on_stop: stop-review-app
    auto_stop_in: 2 days
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

stop-review-app:
  resource_group: $CI_ENVIRONMENT_SLUG-review-app.dashboard.identitysandbox.gov
  script:
    - export CONTEXT=$(kubectl config get-contexts | grep -v CURRENT | grep review | awk '{print $1}' | head -1)
    - kubectl config use-context "$CONTEXT"
    - helm uninstall --namespace review-apps $CI_ENVIRONMENT_SLUG
  stage: review
  image:
    name: dtzar/helm-kubectl:latest
  needs:
    - job: review-app
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

secret_detection:
  stage: scan
  allow_failure: false
  variables:
    SECRET_DETECTION_EXCLUDED_PATHS: 'keys.example,config/artifacts.example,public/acuant/*/opencv.min.js,tmp/0.0.0.0-3000.key'
    SECRET_DETECTION_REPORT_FILE: 'gl-secret-detection-report.json'
  rules:
    - if: $SECRET_DETECTION_DISABLED
      when: never
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      variables:
        SECRET_DETECTION_LOG_OPTIONS: origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}..HEAD
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "main" && $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "main"
      variables:
        SECRET_DETECTION_LOG_OPTIONS: origin/${CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME}..HEAD
  before_script:
    - apk add --no-cache jq
    - git fetch origin --quiet
  script:
    - |
      if [ -z "$SECRET_DETECTION_LOG_OPTIONS" ]; then
        /analyzer run
        if [ -f "$SECRET_DETECTION_REPORT_FILE" ]; then
          # check if '{ "vulnerabilities": [], ..' is empty in the report file if it exists
          if [ "$(jq ".vulnerabilities | length" $SECRET_DETECTION_REPORT_FILE)" -gt 0 ]; then
            echo "Vulnerabilities detected. Please analyze the artifact $SECRET_DETECTION_REPORT_FILE produced by the 'secret-detection' job."
            exit 80
          fi
        else
          echo "Artifact $SECRET_DETECTION_REPORT_FILE does not exist. The 'secret-detection' job likely didn't create one. Hence, no evaluation can be performed."
        fi
      else
        echo "Skipping because this is not a PR or is not targeting main"
        exit 0
      fi

# Export the automated ECR scan results into a format Gitlab can use
# Report schema https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/container-scanning-report-format.json
ecr-scan:
  stage: scan
  interruptible: true
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  tags:
    - build-pool
  needs:
    - job: build-dashboard-image
  image:
    name: amazon/aws-cli
    entrypoint: [""] 
  before_script:
    - curl -LO https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
    - chmod +x jq-linux64
    - mv jq-linux64 /usr/local/bin/jq
  script:
    - >
      while true; do
        SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name identity-dashboard/review --image-id imageTag=$CI_COMMIT_SHA --query 'imageScanStatus.status' --output text || true)
        if echo "$SCAN_STATUS" | grep -q "ACTIVE"; then
          echo "Scan Complete"
          break
        elif echo "$SCAN_STATUS" | grep -q "FAILED"; then
          echo "ECR scan failed"
          exit 1
        else
          echo "Waiting for ECR scan to complete"
          sleep 15
        fi
      done
    - SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name identity-dashboard/review --image-id imageTag=$CI_COMMIT_SHA)
    - echo $SCAN_FINDINGS
    - >
      echo $SCAN_FINDINGS |
      jq -r 'if (.imageScanFindings.enhancedFindings | length > 0) then
      {
        "version": "15.0.4",
        "scan": {
          "start_time": (.imageScanFindings.imageScanCompletedAt | sub("\\.[0-9]+"; "") | strptime("%Y-%m-%dT%H:%M:%S%z") | strftime("%Y-%m-%dT%H:%M:%S")),
          "end_time": (.imageScanFindings.imageScanCompletedAt | sub("\\.[0-9]+"; "") | strptime("%Y-%m-%dT%H:%M:%S%z") | strftime("%Y-%m-%dT%H:%M:%S")),
          "scanner": {
            "id": "clair",
            "name": "Amazon ECR Image Scan",
            "version": "1.0.0",
            "vendor": {
              "name": "Amazon Web Services"
            }
          },
          "analyzer": {
            "id": "clair",
            "name": "Amazon ECR Image Scan",
            "version": "1.0.0",
            "vendor": {
              "name": "Amazon Web Services"
            }
          },
          "status": "success",
          "type": "container_scanning"
        },
        "vulnerabilities": [
          .imageScanFindings.enhancedFindings[] |
          {
            "id": .packageVulnerabilityDetails.vulnerabilityId,
            "name": .title,
            "description": .description,
            "severity": (if .severity == "HIGH" then "High"
                        elif .severity == "MEDIUM" then "Medium"
                        elif .severity == "LOW" then "Low"
                        elif .severity == "CRITICAL" then "Critical"
                        elif .severity == "INFORMATIONAL" then "Info"
                        elif .severity == "UNTRIAGED" then "Info"
                        else "Unknown" end),
            "solution": .remediation.recommendation.text,
            "identifiers": [
              {
                "type": "cve",
                "name": .packageVulnerabilityDetails.vulnerabilityId,
                "url": .packageVulnerabilityDetails.sourceUrl,
                "value": .packageVulnerabilityDetails.vulnerabilityId
              }
            ],
            "links": [
              {
                "name": .packageVulnerabilityDetails.vulnerabilityId,
                "url": .packageVulnerabilityDetails.sourceUrl
              }
            ],
            "location": {
              "dependency": {
                "package": {
                  "name": .packageVulnerabilityDetails.vulnerablePackages[0].name
                },
                "version": .packageVulnerabilityDetails.vulnerablePackages[0].version
              },
              "operating_system": .resources[0].details.awsEcrContainerImage.platform,
              "image": .resources[0].id
            }
          }
        ]
      }
      else
      {
        "version": "15.0.4",
        "scan": {
          "start_time": (now | strftime("%Y-%m-%dT%H:%M:%S")),
          "end_time": (now | strftime("%Y-%m-%dT%H:%M:%S")),
          "scanner": {
            "id": "clair",
            "name": "Amazon ECR Image Scan",
            "version": "1.0.0",
            "vendor": {
              "name": "Amazon Web Services"
            }
          },
          "analyzer": {
            "id": "clair",
            "name": "Amazon ECR Image Scan",
            "version": "1.0.0",
            "vendor": {
              "name": "Amazon Web Services"
            }
          },
          "status": "success",
          "type": "container_scanning"
        },
        "vulnerabilities": []
      }
      end' > gl-container-scanning-report.json
  artifacts:
    paths: 
      - gl-container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json

############################################
# EKS Container Lifecycle Pipelines
############################################

.eks_trigger_rules:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^cmccarthy\/rc-.+/
    - when: never

.eks_push_image_to_environment:
  image:
    name: dtzar/helm-kubectl:latest
  before_script:
    - apk add git yq
#    - curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd
    - git config --global user.email "login-team-mary@login.gov"
    - git config --global user.name "GitLab"
  script:
    - |-
      filter=".[] | select(.name==\"verify-${testEnvironment}-deployment\")"
      echo "Curl1:------------------------------------"; curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | jq "${filter}"
      echo "Curl2:------------------------------------"; curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | jq "${filter}" | jq '.id'
      echo "Test3-------------------------------------"; test=$(curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs"); echo $test
      echo "Test4-------------------------------------"; test=$(curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | jq "${filter}"); echo $test
      echo "Test5-------------------------------------"; test=$(curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | jq "${filter}" | jq '.id'); echo $test
      echo "Curl3:\n------------------"; curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | jq '.[] | select(.name=="verify-ekstest-deployment")' | jq '.id'
      rcTag=$(echo $CI_COMMIT_BRANCH | sed -E 's/^.*\/(.*)/\1/')
      git clone -b cmccarthy/lifecycle-checks --single-branch https://${HELM_CHART_REPO_ACCESS_USER}:${HELM_CHART_REPO_ACCESS_TOKEN}@gitlab.login.gov/lg-public/identity-idp-helm-chart.git
      cd $CI_PROJECT_DIR/identity-idp-helm-chart && git checkout -b ${gitBranch}
      yqFilter=".dashboard.image.repository=\"${rcRepoName}\""; yq -i ${yqFilter} ./environments/${testEnvironment}.yaml
      yqFilter=".dashboard.image.tag=\"${rcTag}\""; yq -i ${yqFilter} ./environments/${testEnvironment}.yaml
      filter=".[] | select(.name==\"verify-${testEnvironment}}-deployment\")"; verifyJobId=$(curl --header "PRIVATE-TOKEN: SSZyGJBcyTzUbnCmAxAx" "https://gitlab.login.gov/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs" | jq "${filter}" | jq '.id')
      git add ./environments/${testEnvironment}.yaml && git commit -m "Deploy Dashboard ${rcTag} image to ${testEnvironment}. Cont Project-JobID:${CI_PROJECT_ID}-${verifyJobId}"
      git push -o merge_request.create -o merge_request.target="${gitMRTarget}" -o merge_request.remove_source_branch origin "${gitBranch}"

#-o merge_request.title="${gitMRTitle}" -o merge_request.description="${gitMRDescription}" origin "${gitBranch}"

.eks_verify_deployment:
  image:
    name: dtzar/helm-kubectl:latest
  before_script:
    - apk add yq
    - curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd
  script:
    - kubectl config get-contexts
    - export CONTEXT=$(kubectl config get-contexts | grep -v CURRENT | grep "${eksClusterName}" | awk '{print $1}' | head -1)
    - kubectl config use-context "$CONTEXT"
    - kubectl port-forward svc/argo-cd-argocd-server -n argocd 8080:443 &
    - sleep 5
    #TODO: Create argocd readonly user to log in as here
    - argocd login localhost:8080 --insecure --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
    - |-
      updateComplete=0
      timeoutCounter=0
      while [ "$updateComplete" -lt 1 ] && [ "$timeoutCounter" -lt 60 ]; do
        sleep 10
        imageArray=$(argocd app manifests "${testEnvironment}"-logingov | yq -NM '.spec.template.spec.containers.[].image' | grep identity-dashboard)
        if [ "${imageArray}" == "${rcRepoName}:${rcTag}" ]; then
          updateComplete=1
          echo "Image updated in manifest"
        else
          ((timeoutCounter+=1))
          echo "Awaiting image to update in manifest. Timeout Counter: ${timeoutCounter}"
        fi
      done
    - argocd app wait "${testEnvironment}"-logingov --timeout 600
    - argocd logout localhost:8080

# Build the RC container on RC Branch creation
build-rc-container:
  extends:
    - .eks_trigger_rules
  stage: eks_release
  needs: []
  environment:
    name: $CI_COMMIT_BRANCH
  interruptible: true
  variables:
  tags:
    - build-pool
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  artifacts:
    paths:
      - imageDigest.tmp
  script:
    - mkdir -p /kaniko/.docker
    - rcTag=$(echo $CI_COMMIT_BRANCH | sed -E 's/^.*\/(.*)/\1/')
    - |-
      KANIKOCFG="\"credsStore\":\"ecr-login\""
      if [ "x${http_proxy}" != "x" -o "x${https_proxy}" != "x" ]; then
        KANIKOCFG="${KANIKOCFG}, \"proxies\": { \"default\": { \"httpProxy\": \"${http_proxy}\", \"httpsProxy\": \"${https_proxy}\", \"noProxy\": \"${no_proxy}\"}}"
      fi 
      KANIKOCFG="{ ${KANIKOCFG} }"
      echo "${KANIKOCFG}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/idp_dashboard.Dockerfile"
      --destination "${ECR_REGISTRY}/identity-dashboard/rc:${rcTag}"
      --cache-repo="${ECR_REGISTRY}/identity-dashboard/rc/cache"
      --digest-file=imageDigest.tmp
      --cache-ttl=168h 
      --cache=true
      --compressed-caching=false
      --build-arg "http_proxy=${http_proxy}"
      --build-arg "https_proxy=${https_proxy}"
      --build-arg "no_proxy=${no_proxy}"
      --build-arg "ARG_CI_ENVIRONMENT_SLUG=${CI_ENVIRONMENT_SLUG}" 
      --build-arg "ARG_CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}"
      --build-arg "ARG_CI_COMMIT_SHA=${CI_COMMIT_SHA}"

# Deploy RC Container to testing environment. Requires updating identity-idp-helm-chart, creating and merging an MR.
ekstest-deployment:
  extends:
    - .eks_trigger_rules
    - .eks_push_image_to_environment
  stage: eks_release
  needs: 
    - job: build-rc-container
  environment:
    name: $CI_COMMIT_BRANCH
  variables:
    #eksClusterName: 'sandbox'
    testEnvironment: 'ekstest'
    gitBranch: 'cmccarthy/deploy-dashboard-${CI_COMMIT_BRANCH}-to-${testEnvironment}'
    gitMRTarget: 'cmccarthy/lifecycle-checks'
    gitMRTitle: "EKS Deployment Pipeline:  Dashboard ${CI_COMMIT_BRANCH} to ${testEnvironment}\nRepository: identity-dashboard\nBranch: ${CI_COMMIT_BRANCH}\nEnvironment: ${testEnvironment}\nGitLab Project ID: ${CI_PROJECT_ID}\nGitLab Pipeline ID: ${CI_PIPELINE_ID}"
    gitMRDescription: "Updates the Dashboard container image tag to ${CI_COMMIT_BRANCH} for the ${testEnvironment} environment"
    rcRepoName: "${ECR_REGISTRY}/identity-dashboard/rc"
  interruptible: true
  tags:
    - build-pool

verify-ekstest-deployment:
  extends:
    - .eks_trigger_rules
    - .eks_verify_deployment
  stage: eks_release
  needs:
    - job: ekstest-deployment
  when: manual
  environment:
    name: $CI_COMMIT_BRANCH
  variables:
    eksClusterName: 'sandbox'
    testEnvironment: 'ekstest'
    #gitBranch: 'cmccarthy/deploy-dashboard-${CI_COMMIT_BRANCH}-to-${testEnvironment}'
    #gitMRTarget: 'cmccarthy/lifecycle-checks'
    #gitMRTitle: "Deploy Dashboard ${CI_COMMIT_BRANCH} to ${testEnvironment}"
    #gitMRDescription: "Updates the Dashboard container image tag to ${CI_COMMIT_BRANCH} for the ${testEnvironment} environment"
    rcRepoName: "${ECR_REGISTRY}/identity-dashboard/rc"
  interruptible: true
  tags:
    - build-pool

integration-tests:
  extends:
    - .eks_trigger_rules
  stage: eks_release
  needs:
    - job: verify-ekstest-deployment
  environment:
    name: $CI_COMMIT_BRANCH
  interruptible: true
  tags:
    - test-pool
  script:
    - echo "This is where integrations tests should execute on the test environment if/when they exist"

staging-deployment:
  extends:
    - .eks_trigger_rules
    - .eks_push_image_to_environment
  stage: eks_release
  when: manual
  needs:
    - job: integration-tests
  environment:
    name: $CI_COMMIT_BRANCH
  variables:
    eksClusterName: 'cmccarthytest'
    testEnvironment: 'eksstaging'  
    gitBranch: 'cmccarthy/deploy-dashboard-${CI_COMMIT_BRANCH}-to-${testEnvironment}'
    gitMRTarget: 'cmccarthy/lifecycle-checks'
    gitMRTitle: "Deploy Dashboard ${CI_COMMIT_BRANCH} to ${testEnvironment}"
    gitMRDescription: "Updates the Dashboard container image tag to ${CI_COMMIT_BRANCH} for the ${testEnvironment} environment"
    rcRepoName: "${ECR_REGISTRY}/identity-dashboard/rc"
  interruptible: true
  tags:
    - build-pool
