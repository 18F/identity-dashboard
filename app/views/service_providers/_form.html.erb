<%= form.error_notification %>
<fieldset class='usa-fieldset'>
  <%= form.input :friendly_name,
                 input_html: { class: 'usa-input' },
                 label_html: { class: 'usa-input-required'},
                 label: 'Friendly name',
                 hint: 'The name of your app that will get displayed to users when logging in.' %>


  <%= form.input :description,
                 as: :usa_textarea,
                 label_html: { class: 'usa-input-optional' },
                 label: 'Description',
                 hint: 'A description of the app (may be helpful for your colleagues).' %>

  <%= form.association :team,
                       as: :usa_collection_select,
                       value_method: :id,
                       collection: current_user.scoped_teams,
                       label: 'Team',
                       disabled: !can_edit_teams?(current_user),
                       hint: 'Assign an agency team to this client.' %>


  <%# label the grouping of items using a fieldset and legend for screen readers,
      and use UL for radio buttons %>
  <fieldset class='usa-fieldset'>
    <legend class='usa-sr-only'>Authentication protocol</legend>
    <%= form.label :identity_protocol,
                   label: 'Authentication protocol',
                   class: 'usa-label' %>
    <%= content_tag(:ul, class: 'usa-input-list') do
      ServiceProvider.identity_protocols.each_key do |protocol| %>
        <%= content_tag(:li) do %>
          <%= form.radio_button :identity_protocol,
                                protocol,
                                class: 'usa-radio__input' %>
          <%= form.label ('identity_protocol_' + protocol).to_sym,
                         protocol.titleize,
                         class: 'usa-radio__label' %>
        <% end %>
      <% end %>
    <% end %>
    <%= form.hint 'We highly recommend using OpenID Connect, unless a technical reason prevents you.' %>
  </fieldset>

  <%= form.input :ial,
                 as: :select,
                 collection: [['IAL1 (standard)', 1], ['IAL2 (verified identity with SSN)', 2]],
                 selected: form.object.ial,
                 input_html: { class: 'usa-input usa-select'},
                 label: 'Identity Assurance Level (IAL)',
                 #label_html: { class: 'usa-input-required'},
                 hint: 'Choose IAL 1 for standard MFA-protected email-based login. <br/> Choose IAL 2 for identity proofed accounts that require SSN and identity verification (aka LOA3).'.html_safe %>

  <%= form.input :default_aal,
                 as: :select,
                 collection: [
                   ['', nil],
                   ['AAL2', 2],
                   ['AAL3', 3]],
                 selected: form.object.default_aal,
                 input_html: { class: 'usa-input usa-select'},
                 label: 'Default Authentication Assurance Level (AAL)',
                 #label_html: { class: 'usa-input-required'},
                 hint: 'Empty - MFA required + remember device is 30 days<br/>AAL2 - MFA required + remember device is 12 hours<br/>AAL3 - unphishable MFA required + remember device is 12 hours'.html_safe %>

  <%# The 'ml2' class doesn't appear to exist in the css anymore, so the sample issuers are not indented %>
  <%= form.input :issuer,
                 disabled: form.object.persisted?,
                 label: 'Issuer',
                 label_html: { class: 'usa-input-required'},
                 input_html: { class: 'usa-input'},
                 hint: if form.object.persisted?
                     '<i>The issuer cannot be changed, but you can create a new test app with a different issuer.</i>'.html_safe
                   else
                     'A unique string to identify the app in the IdP. We recommend something like the following, replacing <code>agency_name</code> and <code>app_name</code> with your own.<br>
                     <i>For OpenID Connect:</i><br>
                     <code class="ml2">urn:gov:gsa:openidconnect.profiles:sp:sso:agency_name:app_name</code><br>
                     <i>For SAML:</i><br>
                     <code class="ml2">urn:gov:gsa:SAML:2.0.profiles:sp:sso:agency_name:app_name</code>'.html_safe
                   end %>

  <% if current_user.admin? %>
    <%= form.input :production_issuer,
                   label: 'Production Issuer',
                   input_html: { class: 'usa-input' } %>

    <%# allow_prompt_login checkbox %>
    <fieldset class="usa-fieldset">
      <legend class="usa-sr-only">Enable prompt=login</legend>
      <%= form.label :allow_prompt_login,
                      label: 'Enable <code>prompt=login</code>'.html_safe,
                      class: 'usa-label' %>
      <ul class="usa-input-list">
        <li>
          <%= form.check_box :allow_prompt_login, class: 'usa-checkbox__input' %>
          <%= form.label :allow_prompt_login, 'Enabled', class: 'usa-checkbox__label' %>
        </li>
      </ul>
    </fieldset>
  <% end %>

  <%# Temp hack to allow feature in dev but not int for testing %>
  <% if Figaro.env.logo_upload_enabled == 'true' %>
    <%= render 'logo_upload', form: form, service_provider: service_provider %>
  <% else %>
    <%= form.input :logo,
                   placeholder: 'generic.svg',
                   label: 'Logo',
                   input_html: { class: 'usa-input' },
                   hint: 'The name of the <a href="https://github.com/18F/identity-idp/tree/main/app/assets/images/sp-logos" target="_blank">logo image file</a> in the IdP. The login.gov team can add this image for you.'.html_safe %>
  <% end %>

  <%= form.input :saml_client_cert,
                 label: 'Public certificate',
                 input_html: { class: 'usa-textarea' },
                 hint: 'Your public certificate, which contains your public key, is needed for OpenID Connect (when using <i>private_key_jwt</i>) and for SAML. This must be <a href="https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail" target="_blank">PEM encoded</a>, for example in the form: <pre><code>-----BEGIN CERTIFICATE-----<br>MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df<br>BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx<br>B7xxt8BVc69rHV15A0qyx77CLSj3tCx2IUXVqRs5mlvA==<br>-----END CERTIFICATE-----</code></pre>'.html_safe %>

  <div class='saml-fields'>
    <%= form.input :acs_url,
                   input_html: { class: 'usa-input' },
                   label: 'Assertion Consumer Service URL — <i>SAML only</i>'.html_safe,
                   hint: "Your application's endpoint which receives authentication assertions, for example: <code>https://app.agency.gov/auth/saml/sso</code>".html_safe %>

    <%= form.input :assertion_consumer_logout_service_url,
                   input_html: { class: 'usa-input' },
                   label: 'Assertion Consumer Logout Service URL — <i>SAML only</i>'.html_safe,
                   hint: 'The endpoint which receives logout requests and responses, for example: <code>https://app.agency.gov/auth/saml/logout</code>'.html_safe %>

    <%= form.input :sp_initiated_login_url,
                   input_html: { class: 'usa-input' },
                   label: 'SP Initiated Login URL — <i>SAML only</i>'.html_safe,
                   hint: 'The endpoint which initializes authentication with login.gov. This is used to trigger a new authentication request and response at the SP for better usability. For example: <code>https://app.agency.gov/users/auth/saml/login</code>'.html_safe %>

    <%= form.input :block_encryption,
                   input_html: { class: 'usa-select' },
                   label: 'SAML Assertion Encryption — <i>SAML only</i><br>'.html_safe,
                   include_blank: false,
                   hint: 'Whether to encrypt SAML assertions sent to your SP. If set to AES, authentication assertions received at your ACS URL will be encrypted with the public key specified above. If set to none, assertions will be protected only by HTTPS.' %>
  </div>

  <%= form.input :return_to_sp_url,
                 input_html: { class: 'usa-input' },
                 label: 'Return to App URL',
                 hint: "The application's URL which login.gov provides to users when they wish to go directly to the app's site or cancel out of authentication. For example: <code>https://app.agency.gov</code>".html_safe %>

  <%= form.input :failure_to_proof_url,
                 input_html: { class: 'usa-input' },
                 label: 'Failure to Proof URL — <i>IAL2 Only</i>'.html_safe,
                 hint: 'The URL provided to users who are unable to complete identity proofing and returning to your application.' %>
  <%= form.input :push_notification_url,
                 input_html: { class: 'usa-input' },
                 label: 'Push notification URL',
                 hint: "Your application's endpoint which receives push notifications." %>

  <%# BEGIN redirect_uris %>
    <div class='oidc-fields'>
      <%= form.label :redirect_uris,
                     label: 'Redirect URIs',
                     class: 'usa-label' %>
    </div>

    <div class='saml-fields'>
      <%= form.label :redirect_uris,
                     label: 'Additional Redirect URIs',
                     class: 'usa-label' %>
    </div>

    <%= content_tag :div, class: 'mb2 json optional service_provider_redirect_uris' do -%>
      <% redirect_uri_list.each do |value| %>
        <%= text_field_tag 'service_provider[redirect_uris][]',
                           value,
                           id: 'service_provider_redirect_uris',
                           class: 'block col-12 json optional usa-input',
                           multiple: 'multiple' %>
      <% end %>
    <% end %>

    <div class='oidc-fields'>
      <%= form.hint 'One or more URIs that login.gov will redirect to after authentication. These can be web URLs (public, internal, or localhost) or a custom scheme to support native applications, for example: <code>gov.agency.app://result</code>'.html_safe %>
    </div>

    <div class='saml-fields margin-0'>
      <%= form.hint 'One or more URIs that login.gov will include in the SAML response CSP headers to allow multiple targets for redirection. These can be web URLs (public, internal, or localhost) or a custom scheme to support native applications, for example: <code>gov.agency.app://result</code>'.html_safe %>
    </div>

    <%= form.button :button,
                    'Add another URI',
                    type: 'button',
                    id: 'add-redirect-uri-field',
                    class: 'usa-button margin-bottom-4' %>
  <%# END redirect_uris %>

  <%# label the grouping of items using a fieldset and legend for screen readers,
      and use UL for checkboxes%>
  <fieldset class='usa-fieldset-inputs usa-fieldset'>
    <legend class='usa-sr-only'>Attribute bundle</legend>
    <%= form.label :attribute_bundle,
                   label: 'Attribute bundle',
                   class: 'usa-label' %>
    <%= form.hint 'Refer to our <a href="https://developers.login.gov/attributes" target="_blank">developer documentation</a> for the possible user attributes available at each IAL level that can be requested by your app.'.html_safe %>

    <%= form.collection_check_boxes(:attribute_bundle,
                                    ServiceProvider.possible_attributes,
                                    :first, :last,
                                    collection_wrapper_tag: :ul,
                                    collection_wrapper_class: 'usa-input-list',
                                    item_wrapper_tag: :li) do |b| %>
      <%= b.check_box class: 'usa-checkbox__input' %>
      <%= b.label class: 'usa-checkbox__label' %>
    <% end %>
  </fieldset>

  <legend class='usa-sr-only'>Active</legend>
  <%= form.label :admin,
                 label: 'Active',
                 class: 'usa-label',
                 hint: "The application's URL which login.gov provides to users when they wish to go directly to the app's site or cancel out of authentication. For example: <code>https://app.agency.gov</code>".html_safe %>
  <%= form.collection_radio_buttons(:active,
                                    { "Yes" => true, "No" => false },
                                    :last, :first,
                                    collection_wrapper_tag: :ul,
                                    collection_wrapper_class: 'usa-input-list',
                                    item_wrapper_tag: :li) do |b| %>
    <%=  b.radio_button(class: "usa-radio__input") %>
    <%=  b.label(class: "usa-radio__label")%>
  <% end %>

  <fieldset class="usa-fieldset-inputs custom-help-text">
    <legend>Custom help text</legend>
    <p>You can specify help text in these different areas to alert users of important information for logging into your app</p>
    <%= form.fields_for :help_text do |h| %>
      <br><legend><b>Sign-in help text:</b></legend>
      <%= h.input "sign_in[en]", label: "<b>English</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("sign_in", "en") } %>
      <%= h.input "sign_in[es]", label: "<b>Español</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("sign_in", "es") } %>
      <%= h.input "sign_in[fr]", label: "<b>Français</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("sign_in", "fr") } %>

      <br><legend><b>Sign-up help text:</b></legend>
      <%= h.input "sign_up[en]", label: "<b>English</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("sign_up", "en") } %>
      <%= h.input "sign_up[es]", label: "<b>Español</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("sign_up", "es") } %>
      <%= h.input "sign_up[fr]", label: "<b>Français</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("sign_up", "fr") } %>

      <br><legend><b>Forgot password help text:</b></legend>
      <%= h.input  "forgot_password[en]", label: "<b>English</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("forgot_password", "en") } %>
      <%= h.input "forgot_password[es]", label: "<b>Español</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("forgot_password", "es") } %>
      <%= h.input "forgot_password[fr]", label: "<b>Français</b>".html_safe, as: :text, required: false, input_html: { value: service_provider.help_text.dig("forgot_password", "fr") } %>

    <% end %>
  </fieldset>
</fieldset>
